"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.REDISEARCH_LANGUAGE = exports.pushSchema = exports.SCHEMA_GEO_SHAPE_COORD_SYSTEM = exports.SCHEMA_VECTOR_FIELD_ALGORITHM = exports.SCHEMA_TEXT_FIELD_PHONETIC = exports.SCHEMA_FIELD_TYPE = void 0;
const generic_transformers_1 = require("@redis/client/dist/lib/commands/generic-transformers");
exports.SCHEMA_FIELD_TYPE = {
    TEXT: 'TEXT',
    NUMERIC: 'NUMERIC',
    GEO: 'GEO',
    TAG: 'TAG',
    VECTOR: 'VECTOR',
    GEOSHAPE: 'GEOSHAPE'
};
exports.SCHEMA_TEXT_FIELD_PHONETIC = {
    DM_EN: 'dm:en',
    DM_FR: 'dm:fr',
    FM_PT: 'dm:pt',
    DM_ES: 'dm:es'
};
exports.SCHEMA_VECTOR_FIELD_ALGORITHM = {
    FLAT: 'FLAT',
    HNSW: 'HNSW'
};
exports.SCHEMA_GEO_SHAPE_COORD_SYSTEM = {
    SPHERICAL: 'SPHERICAL',
    FLAT: 'FLAT'
};
function pushSchema(args, schema) {
    for (const [field, fieldOptions] of Object.entries(schema)) {
        args.push(field);
        if (typeof fieldOptions === 'string') {
            args.push(fieldOptions);
            continue;
        }
        if (fieldOptions.AS) {
            args.push('AS', fieldOptions.AS);
        }
        args.push(fieldOptions.type);
        switch (fieldOptions.type) {
            case exports.SCHEMA_FIELD_TYPE.TEXT:
                if (fieldOptions.NOSTEM) {
                    args.push('NOSTEM');
                }
                if (fieldOptions.WEIGHT) {
                    args.push('WEIGHT', fieldOptions.WEIGHT.toString());
                }
                if (fieldOptions.PHONETIC) {
                    args.push('PHONETIC', fieldOptions.PHONETIC);
                }
                if (fieldOptions.WITHSUFFIXTRIE) {
                    args.push('WITHSUFFIXTRIE');
                }
                break;
            // case SchemaFieldTypes.NUMERIC:
            // case SchemaFieldTypes.GEO:
            //     break;
            case exports.SCHEMA_FIELD_TYPE.TAG:
                if (fieldOptions.SEPARATOR) {
                    args.push('SEPARATOR', fieldOptions.SEPARATOR);
                }
                if (fieldOptions.CASESENSITIVE) {
                    args.push('CASESENSITIVE');
                }
                if (fieldOptions.WITHSUFFIXTRIE) {
                    args.push('WITHSUFFIXTRIE');
                }
                break;
            case exports.SCHEMA_FIELD_TYPE.VECTOR:
                args.push(fieldOptions.ALGORITHM);
                const lengthIndex = args.push('') - 1;
                args.push('TYPE', fieldOptions.TYPE, 'DIM', fieldOptions.DIM.toString(), 'DISTANCE_METRIC', fieldOptions.DISTANCE_METRIC);
                if (fieldOptions.INITIAL_CAP) {
                    args.push('INITIAL_CAP', fieldOptions.INITIAL_CAP.toString());
                }
                switch (fieldOptions.ALGORITHM) {
                    case exports.SCHEMA_VECTOR_FIELD_ALGORITHM.FLAT:
                        if (fieldOptions.BLOCK_SIZE) {
                            args.push('BLOCK_SIZE', fieldOptions.BLOCK_SIZE.toString());
                        }
                        break;
                    case exports.SCHEMA_VECTOR_FIELD_ALGORITHM.HNSW:
                        if (fieldOptions.M) {
                            args.push('M', fieldOptions.M.toString());
                        }
                        if (fieldOptions.EF_CONSTRUCTION) {
                            args.push('EF_CONSTRUCTION', fieldOptions.EF_CONSTRUCTION.toString());
                        }
                        if (fieldOptions.EF_RUNTIME) {
                            args.push('EF_RUNTIME', fieldOptions.EF_RUNTIME.toString());
                        }
                        break;
                }
                args[lengthIndex] = (args.length - lengthIndex - 1).toString();
                continue; // vector fields do not contain SORTABLE and NOINDEX options
            case exports.SCHEMA_FIELD_TYPE.GEOSHAPE:
                if (fieldOptions.COORD_SYSTEM !== undefined) {
                    args.push('COORD_SYSTEM', fieldOptions.COORD_SYSTEM);
                }
                continue; // geo shape fields do not contain SORTABLE and NOINDEX options
        }
        if (fieldOptions.SORTABLE) {
            args.push('SORTABLE');
            if (fieldOptions.SORTABLE === 'UNF') {
                args.push('UNF');
            }
        }
        if (fieldOptions.NOINDEX) {
            args.push('NOINDEX');
        }
    }
}
exports.pushSchema = pushSchema;
exports.REDISEARCH_LANGUAGE = {
    ARABIC: 'Arabic',
    BASQUE: 'Basque',
    CATALANA: 'Catalan',
    DANISH: 'Danish',
    DUTCH: 'Dutch',
    ENGLISH: 'English',
    FINNISH: 'Finnish',
    FRENCH: 'French',
    GERMAN: 'German',
    GREEK: 'Greek',
    HUNGARIAN: 'Hungarian',
    INDONESAIN: 'Indonesian',
    IRISH: 'Irish',
    ITALIAN: 'Italian',
    LITHUANIAN: 'Lithuanian',
    NEPALI: 'Nepali',
    NORWEIGAN: 'Norwegian',
    PORTUGUESE: 'Portuguese',
    ROMANIAN: 'Romanian',
    RUSSIAN: 'Russian',
    SPANISH: 'Spanish',
    SWEDISH: 'Swedish',
    TAMIL: 'Tamil',
    TURKISH: 'Turkish',
    CHINESE: 'Chinese'
};
exports.default = {
    FIRST_KEY_INDEX: undefined,
    IS_READ_ONLY: true,
    transformArguments(index, schema, options) {
        const args = ['FT.CREATE', index];
        if (options?.ON) {
            args.push('ON', options.ON);
        }
        (0, generic_transformers_1.pushOptionalVariadicArgument)(args, 'PREFIX', options?.PREFIX);
        if (options?.FILTER) {
            args.push('FILTER', options.FILTER);
        }
        if (options?.LANGUAGE) {
            args.push('LANGUAGE', options.LANGUAGE);
        }
        if (options?.LANGUAGE_FIELD) {
            args.push('LANGUAGE_FIELD', options.LANGUAGE_FIELD);
        }
        if (options?.SCORE) {
            args.push('SCORE', options.SCORE.toString());
        }
        if (options?.SCORE_FIELD) {
            args.push('SCORE_FIELD', options.SCORE_FIELD);
        }
        // if (options?.PAYLOAD_FIELD) {
        //     args.push('PAYLOAD_FIELD', options.PAYLOAD_FIELD);
        // }
        if (options?.MAXTEXTFIELDS) {
            args.push('MAXTEXTFIELDS');
        }
        if (options?.TEMPORARY) {
            args.push('TEMPORARY', options.TEMPORARY.toString());
        }
        if (options?.NOOFFSETS) {
            args.push('NOOFFSETS');
        }
        if (options?.NOHL) {
            args.push('NOHL');
        }
        if (options?.NOFIELDS) {
            args.push('NOFIELDS');
        }
        if (options?.NOFREQS) {
            args.push('NOFREQS');
        }
        if (options?.SKIPINITIALSCAN) {
            args.push('SKIPINITIALSCAN');
        }
        (0, generic_transformers_1.pushOptionalVariadicArgument)(args, 'STOPWORDS', options?.STOPWORDS);
        args.push('SCHEMA');
        pushSchema(args, schema);
        return args;
    },
    transformReply: undefined
};
