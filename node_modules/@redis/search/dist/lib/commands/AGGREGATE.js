"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FT_AGGREGATE_GROUP_BY_REDUCERS = exports.FT_AGGREGATE_STEPS = void 0;
const SEARCH_1 = require("./SEARCH");
const generic_transformers_1 = require("@redis/client/dist/lib/commands/generic-transformers");
exports.FT_AGGREGATE_STEPS = {
    GROUPBY: 'GROUPBY',
    SORTBY: 'SORTBY',
    APPLY: 'APPLY',
    LIMIT: 'LIMIT',
    FILTER: 'FILTER'
};
exports.FT_AGGREGATE_GROUP_BY_REDUCERS = {
    COUNT: 'COUNT',
    COUNT_DISTINCT: 'COUNT_DISTINCT',
    COUNT_DISTINCTISH: 'COUNT_DISTINCTISH',
    SUM: 'SUM',
    MIN: 'MIN',
    MAX: 'MAX',
    AVG: 'AVG',
    STDDEV: 'STDDEV',
    QUANTILE: 'QUANTILE',
    TOLIST: 'TOLIST',
    FIRST_VALUE: 'FIRST_VALUE',
    RANDOM_SAMPLE: 'RANDOM_SAMPLE'
};
exports.default = {
    FIRST_KEY_INDEX: undefined,
    IS_READ_ONLY: false,
    transformArguments(index, query, options) {
        const args = ['FT.AGGREGATE', index, query];
        if (options?.VERBATIM) {
            args.push('VERBATIM');
        }
        if (options?.LOAD) {
            const length = args.push('LOAD', '');
            if (Array.isArray(options.LOAD)) {
                for (const load of options.LOAD) {
                    pushLoadField(args, load);
                }
            }
            else {
                pushLoadField(args, options.LOAD);
            }
            args[length - 1] = (args.length - length).toString();
        }
        if (options?.TIMEOUT !== undefined) {
            args.push('TIMEOUT', options.TIMEOUT.toString());
        }
        if (options?.STEPS) {
            for (const step of options.STEPS) {
                args.push(step.type);
                switch (step.type) {
                    case exports.FT_AGGREGATE_STEPS.GROUPBY:
                        if (!step.properties) {
                            args.push('0');
                        }
                        else {
                            (0, generic_transformers_1.pushVariadicArgument)(args, step.properties);
                        }
                        if (Array.isArray(step.REDUCE)) {
                            for (const reducer of step.REDUCE) {
                                pushGroupByReducer(args, reducer);
                            }
                        }
                        else {
                            pushGroupByReducer(args, step.REDUCE);
                        }
                        break;
                    case exports.FT_AGGREGATE_STEPS.SORTBY:
                        const length = args.push('');
                        if (Array.isArray(step.BY)) {
                            for (const by of step.BY) {
                                pushSortByProperty(args, by);
                            }
                        }
                        else {
                            pushSortByProperty(args, step.BY);
                        }
                        if (step.MAX) {
                            args.push('MAX', step.MAX.toString());
                        }
                        args[length - 1] = (args.length - length).toString();
                        break;
                    case exports.FT_AGGREGATE_STEPS.APPLY:
                        args.push(step.expression, 'AS', step.AS);
                        break;
                    case exports.FT_AGGREGATE_STEPS.LIMIT:
                        args.push(step.from.toString(), step.size.toString());
                        break;
                    case exports.FT_AGGREGATE_STEPS.FILTER:
                        args.push(step.expression);
                        break;
                }
            }
        }
        (0, SEARCH_1.pushParamsArgument)(args, options?.PARAMS);
        if (options?.DIALECT !== undefined) {
            args.push('DIALECT', options.DIALECT.toString());
        }
        return args;
    },
    transformReply: undefined
};
function pushLoadField(args, toLoad) {
    if (typeof toLoad === 'string' || toLoad instanceof Buffer) {
        args.push(toLoad);
    }
    else {
        args.push(toLoad.identifier);
        if (toLoad.AS) {
            args.push('AS', toLoad.AS);
        }
    }
}
function pushGroupByReducer(args, reducer) {
    args.push('REDUCE', reducer.type);
    switch (reducer.type) {
        case exports.FT_AGGREGATE_GROUP_BY_REDUCERS.COUNT:
            args.push('0');
            break;
        case exports.FT_AGGREGATE_GROUP_BY_REDUCERS.COUNT_DISTINCT:
        case exports.FT_AGGREGATE_GROUP_BY_REDUCERS.COUNT_DISTINCTISH:
        case exports.FT_AGGREGATE_GROUP_BY_REDUCERS.SUM:
        case exports.FT_AGGREGATE_GROUP_BY_REDUCERS.MIN:
        case exports.FT_AGGREGATE_GROUP_BY_REDUCERS.MAX:
        case exports.FT_AGGREGATE_GROUP_BY_REDUCERS.AVG:
        case exports.FT_AGGREGATE_GROUP_BY_REDUCERS.STDDEV:
        case exports.FT_AGGREGATE_GROUP_BY_REDUCERS.TOLIST:
            args.push('1', reducer.property);
            break;
        case exports.FT_AGGREGATE_GROUP_BY_REDUCERS.QUANTILE:
            args.push('2', reducer.property, reducer.quantile.toString());
            break;
        case exports.FT_AGGREGATE_GROUP_BY_REDUCERS.FIRST_VALUE: {
            const length = args.push('', reducer.property) - 1;
            if (reducer.BY) {
                args.push('BY');
                if (typeof reducer.BY === 'string' || reducer.BY instanceof Buffer) {
                    args.push(reducer.BY);
                }
                else {
                    args.push(reducer.BY.property);
                    if (reducer.BY.direction) {
                        args.push(reducer.BY.direction);
                    }
                }
            }
            args[length - 1] = (args.length - length).toString();
            break;
        }
        case exports.FT_AGGREGATE_GROUP_BY_REDUCERS.RANDOM_SAMPLE:
            args.push('2', reducer.property, reducer.sampleSize.toString());
            break;
    }
    if (reducer.AS) {
        args.push('AS', reducer.AS);
    }
}
function pushSortByProperty(args, sortBy) {
    if (typeof sortBy === 'string' || sortBy instanceof Buffer) {
        args.push(sortBy);
    }
    else {
        args.push(sortBy.BY);
        if (sortBy.DIRECTION) {
            args.push(sortBy.DIRECTION);
        }
    }
}
