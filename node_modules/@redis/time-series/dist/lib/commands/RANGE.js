"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.transformRangeArguments = exports.pushRangeArguments = exports.TIME_SERIES_BUCKET_TIMESTAMP = void 0;
const _1 = require(".");
exports.TIME_SERIES_BUCKET_TIMESTAMP = {
    LOW: '-',
    MIDDLE: '~',
    END: '+'
};
function pushRangeArguments(args, fromTimestamp, toTimestamp, options) {
    args.push((0, _1.transformTimestampArgument)(fromTimestamp), (0, _1.transformTimestampArgument)(toTimestamp));
    if (options?.LATEST) {
        args.push('LATEST');
    }
    if (options?.FILTER_BY_TS) {
        args.push('FILTER_BY_TS');
        for (const timestamp of options.FILTER_BY_TS) {
            args.push((0, _1.transformTimestampArgument)(timestamp));
        }
    }
    if (options?.FILTER_BY_VALUE) {
        args.push('FILTER_BY_VALUE', options.FILTER_BY_VALUE.min.toString(), options.FILTER_BY_VALUE.max.toString());
    }
    if (options?.COUNT !== undefined) {
        args.push('COUNT', options.COUNT.toString());
    }
    if (options?.AGGREGATION) {
        if (options?.ALIGN !== undefined) {
            args.push('ALIGN', (0, _1.transformTimestampArgument)(options.ALIGN));
        }
        args.push('AGGREGATION', options.AGGREGATION.type, (0, _1.transformTimestampArgument)(options.AGGREGATION.timeBucket));
        if (options.AGGREGATION.BUCKETTIMESTAMP) {
            args.push('BUCKETTIMESTAMP', options.AGGREGATION.BUCKETTIMESTAMP);
        }
        if (options.AGGREGATION.EMPTY) {
            args.push('EMPTY');
        }
    }
    return args;
}
exports.pushRangeArguments = pushRangeArguments;
function transformRangeArguments(command, key, fromTimestamp, toTimestamp, options) {
    return pushRangeArguments([command, key], fromTimestamp, toTimestamp, options);
}
exports.transformRangeArguments = transformRangeArguments;
exports.default = {
    FIRST_KEY_INDEX: 1,
    IS_READ_ONLY: true,
    transformArguments: transformRangeArguments.bind(undefined, 'TS.RANGE'),
    transformReply: {
        2(reply) {
            return reply.map(sample => _1.transformSampleReply['2'](sample));
        },
        3(reply) {
            return reply.map(sample => _1.transformSampleReply['3'](sample));
        }
    }
};
