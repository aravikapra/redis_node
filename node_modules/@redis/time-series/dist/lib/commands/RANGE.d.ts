import { CommandArguments, RedisArgument, ArrayReply, UnwrapReply } from '@redis/client/dist/lib/RESP/types';
import { Timestamp, SampleRawReply } from '.';
import { TimeSeriesAggregationType } from './CREATERULE';
export declare const TIME_SERIES_BUCKET_TIMESTAMP: {
    LOW: string;
    MIDDLE: string;
    END: string;
};
export type TimeSeriesBucketTimestamp = typeof TIME_SERIES_BUCKET_TIMESTAMP[keyof typeof TIME_SERIES_BUCKET_TIMESTAMP];
export interface TsRangeOptions {
    LATEST?: boolean;
    FILTER_BY_TS?: Array<Timestamp>;
    FILTER_BY_VALUE?: {
        min: number;
        max: number;
    };
    COUNT?: number;
    ALIGN?: Timestamp;
    AGGREGATION?: {
        ALIGN?: Timestamp;
        type: TimeSeriesAggregationType;
        timeBucket: Timestamp;
        BUCKETTIMESTAMP?: TimeSeriesBucketTimestamp;
        EMPTY?: boolean;
    };
}
export declare function pushRangeArguments(args: CommandArguments, fromTimestamp: Timestamp, toTimestamp: Timestamp, options?: TsRangeOptions): CommandArguments;
export declare function transformRangeArguments(command: RedisArgument, key: RedisArgument, fromTimestamp: Timestamp, toTimestamp: Timestamp, options?: TsRangeOptions): CommandArguments;
declare const _default: {
    readonly FIRST_KEY_INDEX: 1;
    readonly IS_READ_ONLY: true;
    readonly transformArguments: (key: RedisArgument, fromTimestamp: Timestamp, toTimestamp: Timestamp, options?: TsRangeOptions | undefined) => CommandArguments;
    readonly transformReply: {
        readonly 2: (this: void, reply: UnwrapReply<ArrayReply<SampleRawReply[2]>>) => {
            timestamp: import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
            value: number;
        }[];
        readonly 3: (this: void, reply: UnwrapReply<ArrayReply<SampleRawReply[3]>>) => {
            timestamp: import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
            value: import("@redis/client/dist/lib/RESP/types").DoubleReply<number>;
        }[];
    };
};
export default _default;
