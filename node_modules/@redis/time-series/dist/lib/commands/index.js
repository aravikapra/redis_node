"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.pushWithLabelsArgument = exports.transformSampleReply = exports.pushLabelsArgument = exports.transformTimestampArgument = exports.pushDuplicatePolicy = exports.TIME_SERIES_DUPLICATE_POLICIES = exports.pushChunkSizeArgument = exports.pushEncodingArgument = exports.TIME_SERIES_ENCODING = exports.pushRetentionArgument = void 0;
const ADD_1 = __importDefault(require("./ADD"));
const ALTER_1 = __importDefault(require("./ALTER"));
const CREATE_1 = __importDefault(require("./CREATE"));
const CREATERULE_1 = __importDefault(require("./CREATERULE"));
const DECRBY_1 = __importDefault(require("./DECRBY"));
const DEL_1 = __importDefault(require("./DEL"));
const DELETERULE_1 = __importDefault(require("./DELETERULE"));
const GET_1 = __importDefault(require("./GET"));
const INCRBY_1 = __importDefault(require("./INCRBY"));
// import INFO_DEBUG from './INFO_DEBUG';
// import INFO from './INFO';
const MADD_1 = __importDefault(require("./MADD"));
const MGET_WITHLABELS_1 = __importDefault(require("./MGET_WITHLABELS"));
const MGET_1 = __importDefault(require("./MGET"));
const MRANGE_WITHLABELS_1 = __importDefault(require("./MRANGE_WITHLABELS"));
const MRANGE_1 = __importDefault(require("./MRANGE"));
const MREVRANGE_WITHLABELS_1 = __importDefault(require("./MREVRANGE_WITHLABELS"));
const MREVRANGE_1 = __importDefault(require("./MREVRANGE"));
const QUERYINDEX_1 = __importDefault(require("./QUERYINDEX"));
const RANGE_1 = __importDefault(require("./RANGE"));
const REVRANGE_1 = __importDefault(require("./REVRANGE"));
const generic_transformers_1 = require("@redis/client/dist/lib/commands/generic-transformers");
exports.default = {
    ADD: ADD_1.default,
    add: ADD_1.default,
    ALTER: ALTER_1.default,
    alter: ALTER_1.default,
    CREATE: CREATE_1.default,
    create: CREATE_1.default,
    CREATERULE: CREATERULE_1.default,
    createRule: CREATERULE_1.default,
    DECRBY: DECRBY_1.default,
    decrBy: DECRBY_1.default,
    DEL: DEL_1.default,
    del: DEL_1.default,
    DELETERULE: DELETERULE_1.default,
    deleteRule: DELETERULE_1.default,
    GET: GET_1.default,
    get: GET_1.default,
    INCRBY: INCRBY_1.default,
    incrBy: INCRBY_1.default,
    // INFO_DEBUG,
    // infoDebug: INFO_DEBUG,
    // INFO,
    // info: INFO,
    MADD: MADD_1.default,
    mAdd: MADD_1.default,
    MGET_WITHLABELS: MGET_WITHLABELS_1.default,
    mGetWithLabels: MGET_WITHLABELS_1.default,
    MGET: MGET_1.default,
    mGet: MGET_1.default,
    MRANGE_WITHLABELS: MRANGE_WITHLABELS_1.default,
    mRangeWithLabels: MRANGE_WITHLABELS_1.default,
    MRANGE: MRANGE_1.default,
    mRange: MRANGE_1.default,
    MREVRANGE_WITHLABELS: MREVRANGE_WITHLABELS_1.default,
    mRevRangeWithLabels: MREVRANGE_WITHLABELS_1.default,
    MREVRANGE: MREVRANGE_1.default,
    mRevRange: MREVRANGE_1.default,
    QUERYINDEX: QUERYINDEX_1.default,
    queryIndex: QUERYINDEX_1.default,
    RANGE: RANGE_1.default,
    range: RANGE_1.default,
    REVRANGE: REVRANGE_1.default,
    revRange: REVRANGE_1.default
};
function pushRetentionArgument(args, retention) {
    if (retention !== undefined) {
        args.push('RETENTION', retention.toString());
    }
}
exports.pushRetentionArgument = pushRetentionArgument;
exports.TIME_SERIES_ENCODING = {
    COMPRESSED: 'COMPRESSED',
    UNCOMPRESSED: 'UNCOMPRESSED'
};
function pushEncodingArgument(args, encoding) {
    if (encoding !== undefined) {
        args.push('ENCODING', encoding);
    }
}
exports.pushEncodingArgument = pushEncodingArgument;
function pushChunkSizeArgument(args, chunkSize) {
    if (chunkSize !== undefined) {
        args.push('CHUNK_SIZE', chunkSize.toString());
    }
}
exports.pushChunkSizeArgument = pushChunkSizeArgument;
exports.TIME_SERIES_DUPLICATE_POLICIES = {
    BLOCK: 'BLOCK',
    FIRST: 'FIRST',
    LAST: 'LAST',
    MIN: 'MIN',
    MAX: 'MAX',
    SUM: 'SUM'
};
function pushDuplicatePolicy(args, duplicatePolicy) {
    if (duplicatePolicy !== undefined) {
        args.push('DUPLICATE_POLICY', duplicatePolicy);
    }
}
exports.pushDuplicatePolicy = pushDuplicatePolicy;
function transformTimestampArgument(timestamp) {
    if (typeof timestamp === 'string')
        return timestamp;
    return (typeof timestamp === 'number' ?
        timestamp :
        timestamp.getTime()).toString();
}
exports.transformTimestampArgument = transformTimestampArgument;
function pushLabelsArgument(args, labels) {
    if (labels) {
        args.push('LABELS');
        for (const [label, value] of Object.entries(labels)) {
            args.push(label, value);
        }
    }
    return args;
}
exports.pushLabelsArgument = pushLabelsArgument;
exports.transformSampleReply = {
    2(reply) {
        const [timestamp, value] = reply;
        return {
            timestamp,
            value: Number(value)
        };
    },
    3(reply) {
        const [timestamp, value] = reply;
        return {
            timestamp,
            value
        };
    }
};
function pushWithLabelsArgument(args, selectedLabels) {
    if (!selectedLabels) {
        args.push('WITHLABELS');
        return args;
    }
    else {
        args.push('SELECTED_LABELS');
        return (0, generic_transformers_1.pushVariadicArguments)(args, selectedLabels);
    }
}
exports.pushWithLabelsArgument = pushWithLabelsArgument;
