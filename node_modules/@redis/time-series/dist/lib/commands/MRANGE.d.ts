import { RedisArgument, CommandArguments } from '@redis/client/dist/lib/RESP/types';
import { RedisVariadicArgument } from '@redis/client/dist/lib/commands/generic-transformers';
import { Timestamp } from '.';
import { TsRangeOptions } from './RANGE';
export declare const TIME_SERIES_REDUCERS: {
    AVG: string;
    SUM: string;
    MIN: string;
    MAX: string;
    RANGE: string;
    COUNT: string;
    STD_P: string;
    STD_S: string;
    VAR_P: string;
    VAR_S: string;
};
export type TimeSeriesReducers = typeof TIME_SERIES_REDUCERS[keyof typeof TIME_SERIES_REDUCERS];
export interface TsMRangeOptions extends TsRangeOptions {
    GROUPBY?: {
        label: RedisArgument;
        reducer: TimeSeriesReducers;
    };
}
export declare function pushGroupByArgument(args: CommandArguments, groupBy?: TsMRangeOptions['GROUPBY']): CommandArguments;
export declare function transformMRangeArguments(command: RedisArgument, fromTimestamp: Timestamp, toTimestamp: Timestamp, filter: RedisVariadicArgument, options?: TsMRangeOptions): CommandArguments;
declare const _default: {
    readonly FIRST_KEY_INDEX: undefined;
    readonly IS_READ_ONLY: true;
    readonly transformArguments: (fromTimestamp: Timestamp, toTimestamp: Timestamp, filter: RedisVariadicArgument, options?: TsMRangeOptions | undefined) => CommandArguments;
    readonly transformReply: () => any;
};
export default _default;
