"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.transformQueryArguments = void 0;
function transformQueryArguments(command, graph, query, options, compact) {
    const args = [
        command,
        graph,
        options?.params ?
            `CYPHER ${queryParamsToString(options.params)} ${query}` :
            query
    ];
    if (options?.TIMEOUT !== undefined) {
        args.push('TIMEOUT', options.TIMEOUT.toString());
    }
    if (compact) {
        args.push('--compact');
    }
    return args;
}
exports.transformQueryArguments = transformQueryArguments;
function queryParamsToString(params) {
    return Object.entries(params)
        .map(([key, value]) => `${key}=${queryParamToString(value)}`)
        .join(' ');
}
function queryParamToString(param) {
    if (param === null) {
        return 'null';
    }
    switch (typeof param) {
        case 'string':
            return `"${param.replace(/["\\]/g, '\\$&')}"`;
        case 'number':
        case 'boolean':
            return param.toString();
    }
    if (Array.isArray(param)) {
        return `[${param.map(queryParamToString).join(',')}]`;
    }
    else if (typeof param === 'object') {
        const body = [];
        for (const [key, value] of Object.entries(param)) {
            body.push(`${key}:${queryParamToString(value)}`);
        }
        return `{${body.join(',')}}`;
    }
    else {
        throw new TypeError(`Unexpected param type ${typeof param} ${param}`);
    }
}
exports.default = {
    FIRST_KEY_INDEX: 1,
    IS_READ_ONLY: false,
    transformArguments: transformQueryArguments.bind(undefined, 'GRAPH.QUERY'),
    transformReply(reply) {
        return reply.length === 1 ? {
            headers: undefined,
            data: undefined,
            metadata: reply[0]
        } : {
            headers: reply[0],
            data: reply[1],
            metadata: reply[2]
        };
    }
};
