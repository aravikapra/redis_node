import { RedisArgument, ArrayReply, BlobStringReply, NumberReply, NullReply, TuplesReply, UnwrapReply } from '@redis/client/dist/lib/RESP/types';
type Headers = ArrayReply<BlobStringReply>;
type Data = ArrayReply<BlobStringReply | NumberReply | NullReply | Data>;
type Metadata = ArrayReply<BlobStringReply>;
type QueryRawReply = TuplesReply<[
    headers: Headers,
    data: Data,
    metadata: Metadata
] | [
    metadata: Metadata
]>;
type QueryParam = null | string | number | boolean | QueryParams | Array<QueryParam>;
type QueryParams = {
    [key: string]: QueryParam;
};
export interface QueryOptions {
    params?: QueryParams;
    TIMEOUT?: number;
}
export declare function transformQueryArguments(command: RedisArgument, graph: RedisArgument, query: RedisArgument, options?: QueryOptions, compact?: boolean): RedisArgument[];
declare const _default: {
    readonly FIRST_KEY_INDEX: 1;
    readonly IS_READ_ONLY: false;
    readonly transformArguments: (graph: RedisArgument, query: RedisArgument, options?: QueryOptions | undefined, compact?: boolean | undefined) => RedisArgument[];
    readonly transformReply: (this: void, reply: UnwrapReply<QueryRawReply>) => {
        headers: undefined;
        data: undefined;
        metadata: Metadata;
    } | {
        headers: Headers;
        data: Data;
        metadata: Metadata;
    };
};
export default _default;
