import { ErrorReply } from '../errors';
import { TypeMapping } from './types';
export declare const RESP_TYPES: {
    readonly NULL: 95;
    readonly BOOLEAN: 35;
    readonly NUMBER: 58;
    readonly BIG_NUMBER: 40;
    readonly DOUBLE: 44;
    readonly SIMPLE_STRING: 43;
    readonly BLOB_STRING: 36;
    readonly VERBATIM_STRING: 61;
    readonly SIMPLE_ERROR: 45;
    readonly BLOB_ERROR: 33;
    readonly ARRAY: 42;
    readonly SET: 126;
    readonly MAP: 37;
    readonly PUSH: 62;
};
export declare const PUSH_TYPE_MAPPING: {
    36: BufferConstructor;
};
interface DecoderOptions {
    onReply(reply: any): unknown;
    onErrorReply(err: ErrorReply): unknown;
    onPush(push: Array<any>): unknown;
    getTypeMapping(): TypeMapping;
}
export declare class Decoder {
    private readonly _config;
    private _cursor;
    private _next;
    constructor(config: DecoderOptions);
    reset(): void;
    write(chunk: any): void;
    private _continueDecodeTypeValue;
    private _decodeTypeValue;
    private _handleDecodedValue;
    private _continueDecodeValue;
    private _decodeNull;
    private _decodeBoolean;
    private _decodeNumber;
    private _maybeDecodeNumberValue;
    private _decodeNumberValue;
    private _decodeUnsingedNumber;
    private _decodeBigNumber;
    private _maybeDecodeBigNumberValue;
    private _decodeBigNumberValue;
    private _decodeUnsingedBigNumber;
    private _decodeDouble;
    private _maybeDecodeDoubleInteger;
    private _decodeDoubleInteger;
    private _continueDecodeDoubleInteger;
    static _DOUBLE_DECIMAL_MULTIPLIERS: number[];
    private _decodeDoubleDecimal;
    private _decodeDoubleExponent;
    private _continueDecodeDoubleExponent;
    private _findCRLF;
    private _decodeSimpleString;
    private _continueDecodeSimpleString;
    private _decodeBlobString;
    private _continueDecodeBlobStringLength;
    private _decodeStringWithLength;
    private _continueDecodeStringWithLength;
    private _decodeBlobStringWithLength;
    private _decodeVerbatimString;
    private _continueDecodeVerbatimStringLength;
    private _decodeVerbatimStringWithLength;
    private _decodeVerbatimStringFormat;
    private _continueDecodeVerbatimStringFormat;
    private _decodeVerbatimStringWithFormat;
    private _continueDecodeVerbatimStringWithFormat;
    private _decodeSimpleError;
    private _continueDecodeSimpleError;
    private _decodeBlobError;
    private _continueDecodeBlobError;
    private _decodeNestedType;
    private _decodeNestedTypeValue;
    private _decodeArray;
    private _decodeArrayWithLength;
    private _continueDecodeArrayLength;
    private _decodeArrayItems;
    private _continueDecodeArrayItems;
    private _decodeSet;
    private _continueDecodeSetLength;
    private _decodeSetItems;
    private _decodeSetAsSet;
    private _continueDecodeSetAsSet;
    private _decodeMap;
    private _continueDecodeMapLength;
    private _decodeMapItems;
    private _decodeMapAsMap;
    private _decodeMapKey;
    private _decodeMapKeyValue;
    private _continueDecodeMapKey;
    private _continueDecodeMapValue;
    private _decodeMapAsObject;
    private _continueDecodeMapAsObjectKey;
    private _continueDecodeMapAsObjectValue;
}
export {};
