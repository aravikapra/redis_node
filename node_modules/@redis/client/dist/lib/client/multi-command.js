"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const commands_1 = __importDefault(require("../commands"));
const multi_command_1 = __importDefault(require("../multi-command"));
const commander_1 = require("../commander");
class RedisClientMultiCommand {
    static _createCommand(command, resp) {
        const transformReply = (0, commander_1.getTransformReply)(command, resp);
        return function (...args) {
            return this.addCommand(command.transformArguments(...args), transformReply);
        };
    }
    static _createModuleCommand(command, resp) {
        const transformReply = (0, commander_1.getTransformReply)(command, resp);
        return function (...args) {
            return this.self.addCommand(command.transformArguments(...args), transformReply);
        };
    }
    static _createFunctionCommand(name, fn, resp) {
        const prefix = (0, commander_1.functionArgumentsPrefix)(name, fn), transformReply = (0, commander_1.getTransformReply)(fn, resp);
        return function (...args) {
            const fnArgs = fn.transformArguments(...args), redisArgs = prefix.concat(fnArgs);
            redisArgs.preserve = fnArgs.preserve;
            return this.self.addCommand(redisArgs, transformReply);
        };
    }
    static _createScriptCommand(script, resp) {
        const transformReply = (0, commander_1.getTransformReply)(script, resp);
        return function (...args) {
            this._multi.addScript(script, script.transformArguments(...args), transformReply);
            return this;
        };
    }
    static extend(config) {
        return (0, commander_1.attachConfig)({
            BaseClass: RedisClientMultiCommand,
            commands: commands_1.default,
            createCommand: RedisClientMultiCommand._createCommand,
            createModuleCommand: RedisClientMultiCommand._createModuleCommand,
            createFunctionCommand: RedisClientMultiCommand._createFunctionCommand,
            createScriptCommand: RedisClientMultiCommand._createScriptCommand,
            config
        });
    }
    _multi = new multi_command_1.default();
    _client;
    _selectedDB;
    constructor(client) {
        this._client = client;
    }
    SELECT(db, transformReply) {
        this._selectedDB = db;
        this._multi.addCommand(['SELECT', db.toString()], transformReply);
        return this;
    }
    select = this.SELECT;
    addCommand(args, transformReply) {
        this._multi.addCommand(args, transformReply);
        return this;
    }
    async exec(execAsPipeline = false) {
        if (execAsPipeline)
            return this.execAsPipeline();
        return this._multi.transformReplies(await this._client._executeMulti(this._multi.queue, this._selectedDB));
    }
    EXEC = this.exec;
    execTyped(execAsPipeline = false) {
        return this.exec(execAsPipeline);
    }
    async execAsPipeline() {
        if (this._multi.queue.length === 0)
            return [];
        return this._multi.transformReplies(await this._client._executePipeline(this._multi.queue));
    }
    execAsPipelineTyped() {
        return this.execAsPipeline();
    }
}
exports.default = RedisClientMultiCommand;
