/// <reference types="node" />
/// <reference types="node" />
import { Decoder } from '../RESP/decoder';
import { CommandArguments, TypeMapping, RespVersions } from '../RESP/types';
import { ChannelListeners, PubSubListener, PubSubType, PubSubTypeListeners } from './pub-sub';
import { EventEmitter } from 'node:stream';
export interface CommandOptions<T = TypeMapping> {
    chainId?: symbol;
    asap?: boolean;
    abortSignal?: AbortSignal;
    /**
     * Maps between RESP and JavaScript types
     */
    typeMapping?: T;
}
export interface CommandToWrite extends CommandWaitingForReply {
    args: CommandArguments;
    chainId?: symbol;
    abort?: {
        signal: AbortSignal;
        listener: () => unknown;
    };
}
interface CommandWaitingForReply {
    resolve(reply?: unknown): void;
    reject(err: unknown): void;
    channelsCounter?: number;
    typeMapping?: TypeMapping;
}
export type OnShardedChannelMoved = (channel: string, listeners: ChannelListeners) => void;
export default class RedisCommandsQueue {
    private readonly _maxLength;
    private readonly _toWrite;
    private readonly _waitingForReply;
    private readonly _onShardedChannelMoved;
    private readonly _pubSub;
    get isPubSubActive(): boolean;
    private _chainInExecution;
    decoder: Decoder;
    constructor(respVersion: RespVersions | null | undefined, maxLength: number | null | undefined, onShardedChannelMoved: EventEmitter['emit']);
    private _initiateDecoder;
    private _onReply;
    private _onErrorReply;
    private _onPush;
    private _getTypeMapping;
    private _initiateResp3Decoder;
    private _initiateResp2Decoder;
    addCommand<T>(args: CommandArguments, options?: CommandOptions): Promise<T>;
    subscribe<T extends boolean>(type: PubSubType, channels: string | Array<string>, listener: PubSubListener<T>, returnBuffers?: T): Promise<void> | undefined;
    unsubscribe<T extends boolean>(type: PubSubType, channels?: string | Array<string>, listener?: PubSubListener<T>, returnBuffers?: T): Promise<void> | undefined;
    resubscribe(): Promise<any> | undefined;
    extendPubSubChannelListeners(type: PubSubType, channel: string, listeners: ChannelListeners): Promise<void> | undefined;
    extendPubSubListeners(type: PubSubType, listeners: PubSubTypeListeners): Promise<void> | undefined;
    getPubSubListeners(type: PubSubType): PubSubTypeListeners;
    private _pushPubSubCommand;
    isWaitingToWrite(): boolean;
    commandsToWrite(): Generator<CommandArguments, void, unknown>;
    private _flushWaitingForReply;
    private static _removeAbortListener;
    private static _flushToWrite;
    flushWaitingForReply(err: Error): void;
    flushAll(err: Error): void;
    isEmpty(): boolean;
}
export {};
