import { RedisArgument, TuplesReply, BlobStringReply, ArrayReply, NullReply } from '../RESP/types';
import { StreamMessageReply } from './generic-transformers';
export interface XAutoClaimOptions {
    COUNT?: number;
}
export type XAutoClaimRawReply = TuplesReply<[
    nextId: BlobStringReply,
    messages: ArrayReply<StreamMessageReply | NullReply>,
    deletedMessages: ArrayReply<BlobStringReply>
]>;
declare const _default: {
    readonly FIRST_KEY_INDEX: 1;
    readonly IS_READ_ONLY: false;
    readonly transformArguments: (this: void, key: RedisArgument, group: RedisArgument, consumer: RedisArgument, minIdleTime: number, start: RedisArgument, options?: XAutoClaimOptions) => RedisArgument[];
    readonly transformReply: (this: void, reply: [nextId: BlobStringReply<string>, messages: ArrayReply<NullReply | StreamMessageReply>, deletedMessages: ArrayReply<BlobStringReply<string>>]) => {
        nextId: BlobStringReply<string>;
        messages: (NullReply | {
            id: BlobStringReply<string>;
            message: Record<string, BlobStringReply<string>>;
        })[];
        deletedMessages: ArrayReply<BlobStringReply<string>>;
    };
};
export default _default;
