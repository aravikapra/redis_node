import { RedisArgument, NullReply, TuplesReply, BlobStringReply, DoubleReply, ArrayReply, UnwrapReply, Resp2Reply } from '../RESP/types';
import { RedisVariadicArgument, SortedSetSide } from './generic-transformers';
export interface ZMPopOptions {
    COUNT?: number;
}
export type ZMPopRawReply = NullReply | TuplesReply<[
    key: BlobStringReply,
    members: ArrayReply<TuplesReply<[
        value: BlobStringReply,
        score: DoubleReply
    ]>>
]>;
export declare function transformZMPopArguments(args: Array<RedisArgument>, keys: RedisVariadicArgument, side: SortedSetSide, options?: ZMPopOptions): RedisArgument[];
export type ZMPopArguments = typeof transformZMPopArguments extends (_: any, ...args: infer T) => any ? T : never;
declare const _default: {
    readonly FIRST_KEY_INDEX: 2;
    readonly IS_READ_ONLY: false;
    readonly transformArguments: (this: void, keys: RedisVariadicArgument, side: SortedSetSide, options?: ZMPopOptions | undefined) => RedisArgument[];
    readonly transformReply: {
        readonly 2: (this: void, reply: UnwrapReply<Resp2Reply<ZMPopRawReply>>) => {
            key: BlobStringReply<string>;
            members: {
                value: BlobStringReply<string>;
                score: number;
            }[];
        } | null;
        readonly 3: (this: void, reply: UnwrapReply<ZMPopRawReply>) => {
            key: BlobStringReply<string>;
            members: {
                value: BlobStringReply<string>;
                score: DoubleReply<number>;
            }[];
        } | null;
    };
};
export default _default;
