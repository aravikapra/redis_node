import { TuplesToMapReply, BlobStringReply, NumberReply, DoubleReply, ArrayReply, UnwrapReply } from '../RESP/types';
export type MemoryStatsReply = TuplesToMapReply<[
    [
        BlobStringReply<'peak.allocated'>,
        NumberReply
    ],
    [
        BlobStringReply<'total.allocated'>,
        NumberReply
    ],
    [
        BlobStringReply<'startup.allocated'>,
        NumberReply
    ],
    [
        BlobStringReply<'replication.backlog'>,
        NumberReply
    ],
    [
        BlobStringReply<'clients.slaves'>,
        NumberReply
    ],
    [
        BlobStringReply<'clients.normal'>,
        NumberReply
    ],
    /** added in 7.0 */
    [
        BlobStringReply<'cluster.links'>,
        NumberReply
    ],
    [
        BlobStringReply<'aof.buffer'>,
        NumberReply
    ],
    [
        BlobStringReply<'lua.caches'>,
        NumberReply
    ],
    /** added in 7.0 */
    [
        BlobStringReply<'functions.caches'>,
        NumberReply
    ],
    [
        BlobStringReply<'overhead.total'>,
        NumberReply
    ],
    [
        BlobStringReply<'keys.count'>,
        NumberReply
    ],
    [
        BlobStringReply<'keys.bytes-per-key'>,
        NumberReply
    ],
    [
        BlobStringReply<'dataset.bytes'>,
        NumberReply
    ],
    [
        BlobStringReply<'dataset.percentage'>,
        DoubleReply
    ],
    [
        BlobStringReply<'peak.percentage'>,
        DoubleReply
    ],
    [
        BlobStringReply<'allocator.allocated'>,
        NumberReply
    ],
    [
        BlobStringReply<'allocator.active'>,
        NumberReply
    ],
    [
        BlobStringReply<'allocator.resident'>,
        NumberReply
    ],
    [
        BlobStringReply<'allocator-fragmentation.ratio'>,
        DoubleReply
    ],
    [
        BlobStringReply<'allocator-fragmentation.bytes'>,
        NumberReply
    ],
    [
        BlobStringReply<'allocator-rss.ratio'>,
        DoubleReply
    ],
    [
        BlobStringReply<'allocator-rss.bytes'>,
        NumberReply
    ],
    [
        BlobStringReply<'rss-overhead.ratio'>,
        DoubleReply
    ],
    [
        BlobStringReply<'rss-overhead.bytes'>,
        NumberReply
    ],
    [
        BlobStringReply<'fragmentation'>,
        DoubleReply
    ],
    [
        BlobStringReply<'fragmentation.bytes'>,
        NumberReply
    ]
]>;
declare const _default: {
    readonly FIRST_KEY_INDEX: undefined;
    readonly IS_READ_ONLY: true;
    readonly transformArguments: (this: void) => string[];
    readonly transformReply: {
        readonly 2: (rawReply: UnwrapReply<ArrayReply<BlobStringReply | NumberReply>>) => {
            "peak.allocated": NumberReply<number>;
            "total.allocated": NumberReply<number>;
            "startup.allocated": NumberReply<number>;
            "replication.backlog": NumberReply<number>;
            "clients.slaves": NumberReply<number>;
            "clients.normal": NumberReply<number>;
            "cluster.links": NumberReply<number>;
            "aof.buffer": NumberReply<number>;
            "lua.caches": NumberReply<number>;
            "functions.caches": NumberReply<number>;
            "overhead.total": NumberReply<number>;
            "keys.count": NumberReply<number>;
            "keys.bytes-per-key": NumberReply<number>;
            "dataset.bytes": NumberReply<number>;
            "dataset.percentage": DoubleReply<number>;
            "peak.percentage": DoubleReply<number>;
            "allocator.allocated": NumberReply<number>;
            "allocator.active": NumberReply<number>;
            "allocator.resident": NumberReply<number>;
            "allocator-fragmentation.ratio": DoubleReply<number>;
            "allocator-fragmentation.bytes": NumberReply<number>;
            "allocator-rss.ratio": DoubleReply<number>;
            "allocator-rss.bytes": NumberReply<number>;
            "rss-overhead.ratio": DoubleReply<number>;
            "rss-overhead.bytes": NumberReply<number>;
            fragmentation: DoubleReply<number>;
            "fragmentation.bytes": NumberReply<number>;
        };
        readonly 3: () => MemoryStatsReply;
    };
};
export default _default;
