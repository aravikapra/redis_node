import { RedisArgument, ArrayReply, BlobStringReply } from '../RESP/types';
import { ZKeys } from './generic-transformers';
export type ZInterKeyAndWeight = {
    key: RedisArgument;
    weight: number;
};
export type ZInterKeys<T> = T | [T, ...Array<T>];
export interface ZInterOptions {
    AGGREGATE?: 'SUM' | 'MIN' | 'MAX';
}
export declare function pushZInterArguments(args: Array<RedisArgument>, keys: ZKeys, options?: ZInterOptions): RedisArgument[];
declare const _default: {
    readonly FIRST_KEY_INDEX: 2;
    readonly IS_READ_ONLY: true;
    readonly transformArguments: (this: void, keys: ZInterKeys<RedisArgument> | ZInterKeys<ZInterKeyAndWeight>, options?: ZInterOptions) => RedisArgument[];
    readonly transformReply: () => ArrayReply<BlobStringReply>;
};
export default _default;
