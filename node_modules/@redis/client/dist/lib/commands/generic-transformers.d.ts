import { ArrayReply, BlobStringReply, BooleanReply, CommandArguments, DoubleReply, NullReply, NumberReply, RedisArgument, TuplesReply } from '../RESP/types';
export declare function isNullReply(reply: unknown): reply is NullReply;
export declare function isArrayReply(reply: unknown): reply is ArrayReply<unknown>;
export declare const transformBooleanReply: {
    2: (reply: NumberReply<0 | 1>) => boolean;
    3: () => BooleanReply;
};
export declare const transformBooleanArrayReply: {
    2: (reply: ArrayReply<NumberReply<0 | 1>>) => boolean[];
    3: () => ArrayReply<BooleanReply>;
};
export type BitValue = 0 | 1;
export declare function transformDoubleArgument(num: number): string;
export declare function transformStringDoubleArgument(num: RedisArgument | number): RedisArgument;
export declare const transformDoubleReply: {
    2: (reply: BlobStringReply) => number;
    3: () => DoubleReply;
};
export declare const transformDoubleArrayReply: {
    2: (reply: Array<BlobStringReply>) => number[];
    3: () => ArrayReply<DoubleReply>;
};
export declare const transformNullableDoubleReply: {
    2: (reply: BlobStringReply | NullReply) => number | null;
    3: () => DoubleReply | NullReply;
};
export declare function transformTuplesReply(reply: ArrayReply<BlobStringReply>): Record<string, BlobStringReply>;
export type StreamMessageReply = TuplesReply<[
    id: BlobStringReply,
    message: ArrayReply<BlobStringReply>
]>;
export declare function transformStreamMessageReply(reply: StreamMessageReply): {
    id: BlobStringReply<string>;
    message: Record<string, BlobStringReply<string>>;
};
export declare function transformStreamMessageNullReply(reply: StreamMessageReply | NullReply): NullReply | {
    id: BlobStringReply<string>;
    message: Record<string, BlobStringReply<string>>;
};
export interface SortedSetMember {
    value: RedisArgument;
    score: number;
}
export type SortedSetSide = 'MIN' | 'MAX';
export declare const transformSortedSetReply: {
    2: (reply: ArrayReply<BlobStringReply>) => {
        value: BlobStringReply<string>;
        score: number;
    }[];
    3: (reply: ArrayReply<TuplesReply<[BlobStringReply, DoubleReply]>>) => {
        value: BlobStringReply<string>;
        score: DoubleReply<number>;
    }[];
};
export type ListSide = 'LEFT' | 'RIGHT';
export declare function transformEXAT(EXAT: number | Date): string;
export declare function transformPXAT(PXAT: number | Date): string;
export interface EvalOptions {
    keys?: Array<string>;
    arguments?: Array<string>;
}
export declare function evalFirstKeyIndex(options?: EvalOptions): string | undefined;
export declare function pushEvalArguments(args: Array<string>, options?: EvalOptions): Array<string>;
export declare function pushVariadicArguments(args: CommandArguments, value: RedisVariadicArgument): CommandArguments;
export declare function pushVariadicNumberArguments(args: CommandArguments, value: number | Array<number>): CommandArguments;
export type RedisVariadicArgument = RedisArgument | Array<RedisArgument>;
export declare function pushVariadicArgument(args: Array<RedisArgument>, value: RedisVariadicArgument): CommandArguments;
export declare function pushOptionalVariadicArgument(args: CommandArguments, name: RedisArgument, value?: RedisVariadicArgument): CommandArguments;
export declare enum CommandFlags {
    WRITE = "write",
    READONLY = "readonly",
    DENYOOM = "denyoom",
    ADMIN = "admin",
    PUBSUB = "pubsub",
    NOSCRIPT = "noscript",
    RANDOM = "random",
    SORT_FOR_SCRIPT = "sort_for_script",
    LOADING = "loading",
    STALE = "stale",
    SKIP_MONITOR = "skip_monitor",
    ASKING = "asking",
    FAST = "fast",
    MOVABLEKEYS = "movablekeys"
}
export declare enum CommandCategories {
    KEYSPACE = "@keyspace",
    READ = "@read",
    WRITE = "@write",
    SET = "@set",
    SORTEDSET = "@sortedset",
    LIST = "@list",
    HASH = "@hash",
    STRING = "@string",
    BITMAP = "@bitmap",
    HYPERLOGLOG = "@hyperloglog",
    GEO = "@geo",
    STREAM = "@stream",
    PUBSUB = "@pubsub",
    ADMIN = "@admin",
    FAST = "@fast",
    SLOW = "@slow",
    BLOCKING = "@blocking",
    DANGEROUS = "@dangerous",
    CONNECTION = "@connection",
    TRANSACTION = "@transaction",
    SCRIPTING = "@scripting"
}
export type CommandRawReply = [
    name: string,
    arity: number,
    flags: Array<CommandFlags>,
    firstKeyIndex: number,
    lastKeyIndex: number,
    step: number,
    categories: Array<CommandCategories>
];
export type CommandReply = {
    name: string;
    arity: number;
    flags: Set<CommandFlags>;
    firstKeyIndex: number;
    lastKeyIndex: number;
    step: number;
    categories: Set<CommandCategories>;
};
export declare function transformCommandReply(this: void, [name, arity, flags, firstKeyIndex, lastKeyIndex, step, categories]: CommandRawReply): CommandReply;
export declare enum RedisFunctionFlags {
    NO_WRITES = "no-writes",
    ALLOW_OOM = "allow-oom",
    ALLOW_STALE = "allow-stale",
    NO_CLUSTER = "no-cluster"
}
export type FunctionListRawItemReply = [
    'library_name',
    string,
    'engine',
    string,
    'functions',
    Array<[
        'name',
        string,
        'description',
        string | null,
        'flags',
        Array<RedisFunctionFlags>
    ]>
];
export interface FunctionListItemReply {
    libraryName: string;
    engine: string;
    functions: Array<{
        name: string;
        description: string | null;
        flags: Array<RedisFunctionFlags>;
    }>;
}
export declare function transformFunctionListItemReply(reply: FunctionListRawItemReply): FunctionListItemReply;
export interface SlotRange {
    start: number;
    end: number;
}
export declare function pushSlotRangesArguments(args: CommandArguments, ranges: SlotRange | Array<SlotRange>): CommandArguments;
export type RawRangeReply = [
    start: number,
    end: number
];
export interface RangeReply {
    start: number;
    end: number;
}
export declare function transformRangeReply([start, end]: RawRangeReply): RangeReply;
export type ZKeyAndWeight = {
    key: RedisArgument;
    weight: number;
};
export type ZVariadicKeys<T> = T | [T, ...Array<T>];
export type ZKeys = ZVariadicKeys<RedisArgument> | ZVariadicKeys<ZKeyAndWeight>;
export declare function pushZKeysArguments(args: CommandArguments, keys: ZKeys): CommandArguments;
