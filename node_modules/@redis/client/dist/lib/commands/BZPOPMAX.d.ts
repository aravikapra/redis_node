import { RedisArgument, NullReply, TuplesReply, BlobStringReply, DoubleReply, UnwrapReply } from '../RESP/types';
import { RedisVariadicArgument } from './generic-transformers';
export declare function transformBZPopArguments(command: RedisArgument, key: RedisVariadicArgument, timeout: number): import("../RESP/types").CommandArguments;
export type BZPopArguments = typeof transformBZPopArguments extends (_: any, ...args: infer T) => any ? T : never;
declare const _default: {
    readonly FIRST_KEY_INDEX: 1;
    readonly IS_READ_ONLY: false;
    readonly transformArguments: (this: void, key: RedisVariadicArgument, timeout: number) => import("../RESP/types").CommandArguments;
    readonly transformReply: {
        readonly 2: (this: void, reply: UnwrapReply<NullReply | TuplesReply<[BlobStringReply, BlobStringReply, BlobStringReply]>>) => {
            key: BlobStringReply<string>;
            value: BlobStringReply<string>;
            score: number;
        } | null;
        readonly 3: (this: void, reply: UnwrapReply<NullReply | TuplesReply<[BlobStringReply, BlobStringReply, DoubleReply]>>) => {
            key: BlobStringReply<string>;
            value: BlobStringReply<string>;
            score: DoubleReply<number>;
        } | null;
    };
};
export default _default;
