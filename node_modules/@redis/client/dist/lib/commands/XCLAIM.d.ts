import { RedisArgument, ArrayReply, NullReply, UnwrapReply } from '../RESP/types';
import { RedisVariadicArgument, StreamMessageReply } from './generic-transformers';
export interface XClaimOptions {
    IDLE?: number;
    TIME?: number | Date;
    RETRYCOUNT?: number;
    FORCE?: boolean;
    LASTID?: RedisArgument;
}
declare const _default: {
    readonly FIRST_KEY_INDEX: 1;
    readonly IS_READ_ONLY: false;
    readonly transformArguments: (this: void, key: RedisArgument, group: RedisArgument, consumer: RedisArgument, minIdleTime: number, id: RedisVariadicArgument, options?: XClaimOptions) => import("../RESP/types").CommandArguments;
    readonly transformReply: (this: void, reply: UnwrapReply<ArrayReply<StreamMessageReply | NullReply>>) => (NullReply | {
        id: import("../RESP/types").BlobStringReply<string>;
        message: Record<string, import("../RESP/types").BlobStringReply<string>>;
    })[];
};
export default _default;
