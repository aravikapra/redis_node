/// <reference types="node" />
import { RedisModules, RedisFunctions, RedisScripts, RespVersions, TypeMapping, RedisClientOptions, RedisClientType as _RedisClientType, RedisClusterOptions, RedisClusterType as _RedisClusterType } from '@redis/client';
declare const modules: {
    graph: {
        readonly CONFIG_GET: {
            readonly FIRST_KEY_INDEX: undefined;
            readonly IS_READ_ONLY: true;
            readonly transformArguments: (this: void, configKey: import("@redis/client").RedisArgument) => import("@redis/client").RedisArgument[];
            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").TuplesReply<[configKey: import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, value: import("@redis/client/dist/lib/RESP/types").NumberReply<number>]> | import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").TuplesReply<[configKey: import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, value: import("@redis/client/dist/lib/RESP/types").NumberReply<number>]>>;
        };
        readonly configGet: {
            readonly FIRST_KEY_INDEX: undefined;
            readonly IS_READ_ONLY: true;
            readonly transformArguments: (this: void, configKey: import("@redis/client").RedisArgument) => import("@redis/client").RedisArgument[];
            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").TuplesReply<[configKey: import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, value: import("@redis/client/dist/lib/RESP/types").NumberReply<number>]> | import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").TuplesReply<[configKey: import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, value: import("@redis/client/dist/lib/RESP/types").NumberReply<number>]>>;
        };
        readonly CONFIG_SET: {
            readonly FIRST_KEY_INDEX: undefined;
            readonly IS_READ_ONLY: false;
            readonly transformArguments: (this: void, configKey: import("@redis/client").RedisArgument, value: number) => import("@redis/client").RedisArgument[];
            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"OK">;
        };
        readonly configSet: {
            readonly FIRST_KEY_INDEX: undefined;
            readonly IS_READ_ONLY: false;
            readonly transformArguments: (this: void, configKey: import("@redis/client").RedisArgument, value: number) => import("@redis/client").RedisArgument[];
            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"OK">;
        };
        readonly DELETE: {
            readonly FIRST_KEY_INDEX: 1;
            readonly IS_READ_ONLY: false;
            readonly transformArguments: (this: void, key: import("@redis/client").RedisArgument) => import("@redis/client").RedisArgument[];
            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>;
        };
        readonly delete: {
            readonly FIRST_KEY_INDEX: 1;
            readonly IS_READ_ONLY: false;
            readonly transformArguments: (this: void, key: import("@redis/client").RedisArgument) => import("@redis/client").RedisArgument[];
            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>;
        };
        readonly EXPLAIN: {
            readonly FIRST_KEY_INDEX: 1;
            readonly IS_READ_ONLY: true;
            readonly transformArguments: (this: void, key: import("@redis/client").RedisArgument, query: import("@redis/client").RedisArgument) => import("@redis/client").RedisArgument[];
            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>;
        };
        readonly explain: {
            readonly FIRST_KEY_INDEX: 1;
            readonly IS_READ_ONLY: true;
            readonly transformArguments: (this: void, key: import("@redis/client").RedisArgument, query: import("@redis/client").RedisArgument) => import("@redis/client").RedisArgument[];
            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>;
        };
        readonly LIST: {
            readonly FIRST_KEY_INDEX: undefined;
            readonly IS_READ_ONLY: true;
            readonly transformArguments: (this: void) => string[];
            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>;
        };
        readonly list: {
            readonly FIRST_KEY_INDEX: undefined;
            readonly IS_READ_ONLY: true;
            readonly transformArguments: (this: void) => string[];
            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>;
        };
        readonly PROFILE: {
            readonly FIRST_KEY_INDEX: 1;
            readonly IS_READ_ONLY: true;
            readonly transformArguments: (this: void, key: import("@redis/client").RedisArgument, query: import("@redis/client").RedisArgument) => import("@redis/client").RedisArgument[];
            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>;
        };
        readonly profile: {
            readonly FIRST_KEY_INDEX: 1;
            readonly IS_READ_ONLY: true;
            readonly transformArguments: (this: void, key: import("@redis/client").RedisArgument, query: import("@redis/client").RedisArgument) => import("@redis/client").RedisArgument[];
            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>;
        };
        readonly QUERY: {
            readonly FIRST_KEY_INDEX: 1;
            readonly IS_READ_ONLY: false;
            readonly transformArguments: (graph: import("@redis/client").RedisArgument, query: import("@redis/client").RedisArgument, options?: import("@redis/graph/dist/lib/commands/QUERY").QueryOptions | undefined, compact?: boolean | undefined) => import("@redis/client").RedisArgument[];
            readonly transformReply: (this: void, reply: import("@redis/client/dist/lib/RESP/types").UnwrapReply<import("@redis/client/dist/lib/RESP/types").TuplesReply<[headers: import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>, data: import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string> | import("@redis/client/dist/lib/RESP/types").NumberReply<number> | import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string> | import("@redis/client/dist/lib/RESP/types").NumberReply<number> | import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string> | import("@redis/client/dist/lib/RESP/types").NumberReply<number> | import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string> | import("@redis/client/dist/lib/RESP/types").NumberReply<number> | import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string> | import("@redis/client/dist/lib/RESP/types").NumberReply<number> | import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string> | import("@redis/client/dist/lib/RESP/types").NumberReply<number> | import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string> | import("@redis/client/dist/lib/RESP/types").NumberReply<number> | import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string> | import("@redis/client/dist/lib/RESP/types").NumberReply<number> | import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string> | import("@redis/client/dist/lib/RESP/types").NumberReply<number> | import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string> | import("@redis/client/dist/lib/RESP/types").NumberReply<number> | import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").ArrayReply<any>>>>>>>>>>>, metadata: import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>] | [metadata: import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>]>>) => {
                headers: undefined;
                data: undefined;
                metadata: import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>;
            } | {
                headers: import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>;
                data: import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string> | import("@redis/client/dist/lib/RESP/types").NumberReply<number> | import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string> | import("@redis/client/dist/lib/RESP/types").NumberReply<number> | import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string> | import("@redis/client/dist/lib/RESP/types").NumberReply<number> | import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string> | import("@redis/client/dist/lib/RESP/types").NumberReply<number> | import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string> | import("@redis/client/dist/lib/RESP/types").NumberReply<number> | import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string> | import("@redis/client/dist/lib/RESP/types").NumberReply<number> | import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string> | import("@redis/client/dist/lib/RESP/types").NumberReply<number> | import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string> | import("@redis/client/dist/lib/RESP/types").NumberReply<number> | import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string> | import("@redis/client/dist/lib/RESP/types").NumberReply<number> | import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string> | import("@redis/client/dist/lib/RESP/types").NumberReply<number> | import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").ArrayReply<any>>>>>>>>>>>;
                metadata: import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>;
            };
        };
        readonly query: {
            readonly FIRST_KEY_INDEX: 1;
            readonly IS_READ_ONLY: false;
            readonly transformArguments: (graph: import("@redis/client").RedisArgument, query: import("@redis/client").RedisArgument, options?: import("@redis/graph/dist/lib/commands/QUERY").QueryOptions | undefined, compact?: boolean | undefined) => import("@redis/client").RedisArgument[];
            readonly transformReply: (this: void, reply: import("@redis/client/dist/lib/RESP/types").UnwrapReply<import("@redis/client/dist/lib/RESP/types").TuplesReply<[headers: import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>, data: import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string> | import("@redis/client/dist/lib/RESP/types").NumberReply<number> | import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string> | import("@redis/client/dist/lib/RESP/types").NumberReply<number> | import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string> | import("@redis/client/dist/lib/RESP/types").NumberReply<number> | import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string> | import("@redis/client/dist/lib/RESP/types").NumberReply<number> | import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string> | import("@redis/client/dist/lib/RESP/types").NumberReply<number> | import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string> | import("@redis/client/dist/lib/RESP/types").NumberReply<number> | import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string> | import("@redis/client/dist/lib/RESP/types").NumberReply<number> | import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string> | import("@redis/client/dist/lib/RESP/types").NumberReply<number> | import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string> | import("@redis/client/dist/lib/RESP/types").NumberReply<number> | import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string> | import("@redis/client/dist/lib/RESP/types").NumberReply<number> | import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").ArrayReply<any>>>>>>>>>>>, metadata: import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>] | [metadata: import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>]>>) => {
                headers: undefined;
                data: undefined;
                metadata: import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>;
            } | {
                headers: import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>;
                data: import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string> | import("@redis/client/dist/lib/RESP/types").NumberReply<number> | import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string> | import("@redis/client/dist/lib/RESP/types").NumberReply<number> | import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string> | import("@redis/client/dist/lib/RESP/types").NumberReply<number> | import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string> | import("@redis/client/dist/lib/RESP/types").NumberReply<number> | import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string> | import("@redis/client/dist/lib/RESP/types").NumberReply<number> | import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string> | import("@redis/client/dist/lib/RESP/types").NumberReply<number> | import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string> | import("@redis/client/dist/lib/RESP/types").NumberReply<number> | import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string> | import("@redis/client/dist/lib/RESP/types").NumberReply<number> | import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string> | import("@redis/client/dist/lib/RESP/types").NumberReply<number> | import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string> | import("@redis/client/dist/lib/RESP/types").NumberReply<number> | import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").ArrayReply<any>>>>>>>>>>>;
                metadata: import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>;
            };
        };
        readonly RO_QUERY: {
            readonly FIRST_KEY_INDEX: 1;
            readonly IS_READ_ONLY: true;
            readonly transformArguments: (graph: import("@redis/client").RedisArgument, query: import("@redis/client").RedisArgument, options?: import("@redis/graph/dist/lib/commands/QUERY").QueryOptions | undefined, compact?: boolean | undefined) => import("@redis/client").RedisArgument[];
            readonly transformReply: (this: void, reply: import("@redis/client/dist/lib/RESP/types").UnwrapReply<import("@redis/client/dist/lib/RESP/types").TuplesReply<[headers: import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>, data: import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string> | import("@redis/client/dist/lib/RESP/types").NumberReply<number> | import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string> | import("@redis/client/dist/lib/RESP/types").NumberReply<number> | import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string> | import("@redis/client/dist/lib/RESP/types").NumberReply<number> | import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string> | import("@redis/client/dist/lib/RESP/types").NumberReply<number> | import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string> | import("@redis/client/dist/lib/RESP/types").NumberReply<number> | import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string> | import("@redis/client/dist/lib/RESP/types").NumberReply<number> | import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string> | import("@redis/client/dist/lib/RESP/types").NumberReply<number> | import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string> | import("@redis/client/dist/lib/RESP/types").NumberReply<number> | import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string> | import("@redis/client/dist/lib/RESP/types").NumberReply<number> | import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string> | import("@redis/client/dist/lib/RESP/types").NumberReply<number> | import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").ArrayReply<any>>>>>>>>>>>, metadata: import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>] | [metadata: import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>]>>) => {
                headers: undefined;
                data: undefined;
                metadata: import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>;
            } | {
                headers: import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>;
                data: import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string> | import("@redis/client/dist/lib/RESP/types").NumberReply<number> | import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string> | import("@redis/client/dist/lib/RESP/types").NumberReply<number> | import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string> | import("@redis/client/dist/lib/RESP/types").NumberReply<number> | import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string> | import("@redis/client/dist/lib/RESP/types").NumberReply<number> | import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string> | import("@redis/client/dist/lib/RESP/types").NumberReply<number> | import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string> | import("@redis/client/dist/lib/RESP/types").NumberReply<number> | import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string> | import("@redis/client/dist/lib/RESP/types").NumberReply<number> | import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string> | import("@redis/client/dist/lib/RESP/types").NumberReply<number> | import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string> | import("@redis/client/dist/lib/RESP/types").NumberReply<number> | import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string> | import("@redis/client/dist/lib/RESP/types").NumberReply<number> | import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").ArrayReply<any>>>>>>>>>>>;
                metadata: import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>;
            };
        };
        readonly roQuery: {
            readonly FIRST_KEY_INDEX: 1;
            readonly IS_READ_ONLY: true;
            readonly transformArguments: (graph: import("@redis/client").RedisArgument, query: import("@redis/client").RedisArgument, options?: import("@redis/graph/dist/lib/commands/QUERY").QueryOptions | undefined, compact?: boolean | undefined) => import("@redis/client").RedisArgument[];
            readonly transformReply: (this: void, reply: import("@redis/client/dist/lib/RESP/types").UnwrapReply<import("@redis/client/dist/lib/RESP/types").TuplesReply<[headers: import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>, data: import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string> | import("@redis/client/dist/lib/RESP/types").NumberReply<number> | import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string> | import("@redis/client/dist/lib/RESP/types").NumberReply<number> | import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string> | import("@redis/client/dist/lib/RESP/types").NumberReply<number> | import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string> | import("@redis/client/dist/lib/RESP/types").NumberReply<number> | import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string> | import("@redis/client/dist/lib/RESP/types").NumberReply<number> | import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string> | import("@redis/client/dist/lib/RESP/types").NumberReply<number> | import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string> | import("@redis/client/dist/lib/RESP/types").NumberReply<number> | import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string> | import("@redis/client/dist/lib/RESP/types").NumberReply<number> | import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string> | import("@redis/client/dist/lib/RESP/types").NumberReply<number> | import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string> | import("@redis/client/dist/lib/RESP/types").NumberReply<number> | import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").ArrayReply<any>>>>>>>>>>>, metadata: import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>] | [metadata: import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>]>>) => {
                headers: undefined;
                data: undefined;
                metadata: import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>;
            } | {
                headers: import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>;
                data: import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string> | import("@redis/client/dist/lib/RESP/types").NumberReply<number> | import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string> | import("@redis/client/dist/lib/RESP/types").NumberReply<number> | import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string> | import("@redis/client/dist/lib/RESP/types").NumberReply<number> | import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string> | import("@redis/client/dist/lib/RESP/types").NumberReply<number> | import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string> | import("@redis/client/dist/lib/RESP/types").NumberReply<number> | import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string> | import("@redis/client/dist/lib/RESP/types").NumberReply<number> | import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string> | import("@redis/client/dist/lib/RESP/types").NumberReply<number> | import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string> | import("@redis/client/dist/lib/RESP/types").NumberReply<number> | import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string> | import("@redis/client/dist/lib/RESP/types").NumberReply<number> | import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string> | import("@redis/client/dist/lib/RESP/types").NumberReply<number> | import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").ArrayReply<any>>>>>>>>>>>;
                metadata: import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>;
            };
        };
        readonly SLOWLOG: {
            readonly FIRST_KEY_INDEX: 1;
            readonly IS_READ_ONLY: true;
            readonly transformArguments: (this: void, key: import("@redis/client").RedisArgument) => import("@redis/client").RedisArgument[];
            readonly transformReply: (this: void, reply: import("@redis/client/dist/lib/RESP/types").TuplesReply<[timestamp: import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, command: import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, query: import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, took: import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>]>[]) => {
                timestamp: number;
                command: import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>;
                query: import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>;
                took: number;
            }[];
        };
        readonly slowLog: {
            readonly FIRST_KEY_INDEX: 1;
            readonly IS_READ_ONLY: true;
            readonly transformArguments: (this: void, key: import("@redis/client").RedisArgument) => import("@redis/client").RedisArgument[];
            readonly transformReply: (this: void, reply: import("@redis/client/dist/lib/RESP/types").TuplesReply<[timestamp: import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, command: import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, query: import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, took: import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>]>[]) => {
                timestamp: number;
                command: import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>;
                query: import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>;
                took: number;
            }[];
        };
    };
    json: {
        ARRAPPEND: {
            readonly FIRST_KEY_INDEX: 1;
            readonly IS_READ_ONLY: false;
            readonly transformArguments: (this: void, key: import("@redis/client").RedisArgument, path: import("@redis/client").RedisArgument, json: import("@redis/json/dist/lib/commands").RedisJSON, ...jsons: import("@redis/json/dist/lib/commands").RedisJSON[]) => import("@redis/client").RedisArgument[];
            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").NumberReply<number> | import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").NumberReply<number> | import("@redis/client/dist/lib/RESP/types").NullReply>;
        };
        arrAppend: {
            readonly FIRST_KEY_INDEX: 1;
            readonly IS_READ_ONLY: false;
            readonly transformArguments: (this: void, key: import("@redis/client").RedisArgument, path: import("@redis/client").RedisArgument, json: import("@redis/json/dist/lib/commands").RedisJSON, ...jsons: import("@redis/json/dist/lib/commands").RedisJSON[]) => import("@redis/client").RedisArgument[];
            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").NumberReply<number> | import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").NumberReply<number> | import("@redis/client/dist/lib/RESP/types").NullReply>;
        };
        ARRINDEX: {
            readonly FIRST_KEY_INDEX: 1;
            readonly IS_READ_ONLY: true;
            readonly transformArguments: (this: void, key: import("@redis/client").RedisArgument, path: import("@redis/client").RedisArgument, json: import("@redis/json/dist/lib/commands").RedisJSON, options?: import("@redis/json/dist/lib/commands/ARRINDEX").JsonArrIndexOptions | undefined) => import("@redis/client").RedisArgument[];
            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").NumberReply<number> | import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").NumberReply<number> | import("@redis/client/dist/lib/RESP/types").NullReply>;
        };
        arrIndex: {
            readonly FIRST_KEY_INDEX: 1;
            readonly IS_READ_ONLY: true;
            readonly transformArguments: (this: void, key: import("@redis/client").RedisArgument, path: import("@redis/client").RedisArgument, json: import("@redis/json/dist/lib/commands").RedisJSON, options?: import("@redis/json/dist/lib/commands/ARRINDEX").JsonArrIndexOptions | undefined) => import("@redis/client").RedisArgument[];
            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").NumberReply<number> | import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").NumberReply<number> | import("@redis/client/dist/lib/RESP/types").NullReply>;
        };
        ARRINSERT: {
            readonly FIRST_KEY_INDEX: 1;
            readonly IS_READ_ONLY: false;
            readonly transformArguments: (this: void, key: import("@redis/client").RedisArgument, path: import("@redis/client").RedisArgument, index: number, json: import("@redis/json/dist/lib/commands").RedisJSON, ...jsons: import("@redis/json/dist/lib/commands").RedisJSON[]) => import("@redis/client").RedisArgument[];
            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").NumberReply<number> | import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").NumberReply<number> | import("@redis/client/dist/lib/RESP/types").NullReply>;
        };
        arrInsert: {
            readonly FIRST_KEY_INDEX: 1;
            readonly IS_READ_ONLY: false;
            readonly transformArguments: (this: void, key: import("@redis/client").RedisArgument, path: import("@redis/client").RedisArgument, index: number, json: import("@redis/json/dist/lib/commands").RedisJSON, ...jsons: import("@redis/json/dist/lib/commands").RedisJSON[]) => import("@redis/client").RedisArgument[];
            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").NumberReply<number> | import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").NumberReply<number> | import("@redis/client/dist/lib/RESP/types").NullReply>;
        };
        ARRLEN: {
            readonly FIRST_KEY_INDEX: 1;
            readonly IS_READ_ONLY: true;
            readonly transformArguments: (this: void, key: import("@redis/client").RedisArgument, options?: import("@redis/json/dist/lib/commands/ARRLEN").JsonArrLenOptions | undefined) => import("@redis/client").RedisArgument[];
            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").NumberReply<number> | import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").NumberReply<number> | import("@redis/client/dist/lib/RESP/types").NullReply>;
        };
        arrLen: {
            readonly FIRST_KEY_INDEX: 1;
            readonly IS_READ_ONLY: true;
            readonly transformArguments: (this: void, key: import("@redis/client").RedisArgument, options?: import("@redis/json/dist/lib/commands/ARRLEN").JsonArrLenOptions | undefined) => import("@redis/client").RedisArgument[];
            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").NumberReply<number> | import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").NumberReply<number> | import("@redis/client/dist/lib/RESP/types").NullReply>;
        };
        ARRPOP: {
            readonly FIRST_KEY_INDEX: 1;
            readonly IS_READ_ONLY: false;
            readonly transformArguments: (this: void, key: import("@redis/client").RedisArgument, options?: import("@redis/json/dist/lib/commands/ARRPOP").RedisArrPopOptions | undefined) => import("@redis/client").RedisArgument[];
            readonly transformReply: (this: void, reply: import("@redis/client/dist/lib/RESP/types").BlobStringReply<string> | import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string> | import("@redis/client/dist/lib/RESP/types").NullReply>) => string | number | boolean | import("@redis/client/dist/lib/RESP/types").NullReply | Date | {
                [key: string]: import("@redis/json/dist/lib/commands").RedisJSON;
                [key: number]: import("@redis/json/dist/lib/commands").RedisJSON;
            } | (import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/json/dist/lib/commands").RedisJSON)[] | null;
        };
        arrPop: {
            readonly FIRST_KEY_INDEX: 1;
            readonly IS_READ_ONLY: false;
            readonly transformArguments: (this: void, key: import("@redis/client").RedisArgument, options?: import("@redis/json/dist/lib/commands/ARRPOP").RedisArrPopOptions | undefined) => import("@redis/client").RedisArgument[];
            readonly transformReply: (this: void, reply: import("@redis/client/dist/lib/RESP/types").BlobStringReply<string> | import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string> | import("@redis/client/dist/lib/RESP/types").NullReply>) => string | number | boolean | import("@redis/client/dist/lib/RESP/types").NullReply | Date | (import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/json/dist/lib/commands").RedisJSON)[] | {
                [key: string]: import("@redis/json/dist/lib/commands").RedisJSON;
                [key: number]: import("@redis/json/dist/lib/commands").RedisJSON;
            } | null;
        };
        ARRTRIM: {
            readonly FIRST_KEY_INDEX: 1;
            readonly IS_READ_ONLY: false;
            readonly transformArguments: (this: void, key: import("@redis/client").RedisArgument, path: import("@redis/client").RedisArgument, start: number, stop: number) => import("@redis/client").RedisArgument[];
            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").NumberReply<number> | import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").NumberReply<number> | import("@redis/client/dist/lib/RESP/types").NullReply>;
        };
        arrTrim: {
            readonly FIRST_KEY_INDEX: 1;
            readonly IS_READ_ONLY: false;
            readonly transformArguments: (this: void, key: import("@redis/client").RedisArgument, path: import("@redis/client").RedisArgument, start: number, stop: number) => import("@redis/client").RedisArgument[];
            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").NumberReply<number> | import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").NumberReply<number> | import("@redis/client/dist/lib/RESP/types").NullReply>;
        };
        CLEAR: {
            readonly FIRST_KEY_INDEX: 1;
            readonly IS_READ_ONLY: false;
            readonly transformArguments: (this: void, key: import("@redis/client").RedisArgument, options?: import("@redis/json/dist/lib/commands/CLEAR").JsonClearOptions | undefined) => import("@redis/client").RedisArgument[];
            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
        };
        clear: {
            readonly FIRST_KEY_INDEX: 1;
            readonly IS_READ_ONLY: false;
            readonly transformArguments: (this: void, key: import("@redis/client").RedisArgument, options?: import("@redis/json/dist/lib/commands/CLEAR").JsonClearOptions | undefined) => import("@redis/client").RedisArgument[];
            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
        };
        DEBUG_MEMORY: {
            readonly FIRST_KEY_INDEX: 2;
            readonly IS_READ_ONLY: false;
            readonly transformArguments: (this: void, key: import("@redis/client").RedisArgument, options?: import("@redis/json/dist/lib/commands/DEBUG_MEMORY").JsonDebugMemoryOptions | undefined) => import("@redis/client").RedisArgument[];
            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
        };
        debugMemory: {
            readonly FIRST_KEY_INDEX: 2;
            readonly IS_READ_ONLY: false;
            readonly transformArguments: (this: void, key: import("@redis/client").RedisArgument, options?: import("@redis/json/dist/lib/commands/DEBUG_MEMORY").JsonDebugMemoryOptions | undefined) => import("@redis/client").RedisArgument[];
            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
        };
        DEL: {
            readonly FIRST_KEY_INDEX: 1;
            readonly IS_READ_ONLY: false;
            readonly transformArguments: (this: void, key: import("@redis/client").RedisArgument, options?: import("@redis/json/dist/lib/commands/DEL").JsonDelOptions | undefined) => import("@redis/client").RedisArgument[];
            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
        };
        del: {
            readonly FIRST_KEY_INDEX: 1;
            readonly IS_READ_ONLY: false;
            readonly transformArguments: (this: void, key: import("@redis/client").RedisArgument, options?: import("@redis/json/dist/lib/commands/DEL").JsonDelOptions | undefined) => import("@redis/client").RedisArgument[];
            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
        };
        FORGET: {
            readonly FIRST_KEY_INDEX: 1;
            readonly IS_READ_ONLY: false;
            readonly transformArguments: (this: void, key: import("@redis/client").RedisArgument, options?: import("@redis/json/dist/lib/commands/FORGET").JsonForgetOptions | undefined) => import("@redis/client").RedisArgument[];
            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
        };
        forget: {
            readonly FIRST_KEY_INDEX: 1;
            readonly IS_READ_ONLY: false;
            readonly transformArguments: (this: void, key: import("@redis/client").RedisArgument, options?: import("@redis/json/dist/lib/commands/FORGET").JsonForgetOptions | undefined) => import("@redis/client").RedisArgument[];
            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
        };
        GET: {
            readonly FIRST_KEY_INDEX: 1;
            readonly IS_READ_ONLY: false;
            readonly transformArguments: (this: void, key: import("@redis/client").RedisArgument, options?: import("@redis/json/dist/lib/commands/GET").JsonGetOptions | undefined) => import("@redis/client").RedisArgument[];
            readonly transformReply: typeof import("@redis/json/dist/lib/commands").transformRedisJsonNullReply;
        };
        get: {
            readonly FIRST_KEY_INDEX: 1;
            readonly IS_READ_ONLY: false;
            readonly transformArguments: (this: void, key: import("@redis/client").RedisArgument, options?: import("@redis/json/dist/lib/commands/GET").JsonGetOptions | undefined) => import("@redis/client").RedisArgument[];
            readonly transformReply: typeof import("@redis/json/dist/lib/commands").transformRedisJsonNullReply;
        };
        MERGE: {
            readonly FIRST_KEY_INDEX: 1;
            readonly IS_READ_ONLY: false;
            readonly transformArguments: (this: void, key: import("@redis/client").RedisArgument, path: import("@redis/client").RedisArgument, value: import("@redis/json/dist/lib/commands").RedisJSON) => import("@redis/client").RedisArgument[];
            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"OK">;
        };
        merge: {
            readonly FIRST_KEY_INDEX: 1;
            readonly IS_READ_ONLY: false;
            readonly transformArguments: (this: void, key: import("@redis/client").RedisArgument, path: import("@redis/client").RedisArgument, value: import("@redis/json/dist/lib/commands").RedisJSON) => import("@redis/client").RedisArgument[];
            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"OK">;
        };
        MGET: {
            readonly FIRST_KEY_INDEX: 1;
            readonly IS_READ_ONLY: true;
            readonly transformArguments: (this: void, keys: import("@redis/client").RedisArgument[], path: import("@redis/client").RedisArgument) => import("@redis/client").RedisArgument[];
            readonly transformReply: (this: void, reply: (import("@redis/client/dist/lib/RESP/types").BlobStringReply<string> | import("@redis/client/dist/lib/RESP/types").NullReply)[]) => (import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/json/dist/lib/commands").RedisJSON)[];
        };
        mGet: {
            readonly FIRST_KEY_INDEX: 1;
            readonly IS_READ_ONLY: true;
            readonly transformArguments: (this: void, keys: import("@redis/client").RedisArgument[], path: import("@redis/client").RedisArgument) => import("@redis/client").RedisArgument[];
            readonly transformReply: (this: void, reply: (import("@redis/client/dist/lib/RESP/types").BlobStringReply<string> | import("@redis/client/dist/lib/RESP/types").NullReply)[]) => (import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/json/dist/lib/commands").RedisJSON)[];
        };
        MSET: {
            readonly FIRST_KEY_INDEX: 1;
            readonly IS_READ_ONLY: false;
            readonly transformArguments: (this: void, items: import("@redis/json/dist/lib/commands/MSET").JsonMSetItem[]) => import("@redis/client").RedisArgument[];
            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"OK">;
        };
        mSet: {
            readonly FIRST_KEY_INDEX: 1;
            readonly IS_READ_ONLY: false;
            readonly transformArguments: (this: void, items: import("@redis/json/dist/lib/commands/MSET").JsonMSetItem[]) => import("@redis/client").RedisArgument[];
            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"OK">;
        };
        NUMINCRBY: {
            readonly FIRST_KEY_INDEX: 1;
            readonly IS_READ_ONLY: false;
            readonly transformArguments: (this: void, key: import("@redis/client").RedisArgument, path: import("@redis/client").RedisArgument, by: number) => import("@redis/client").RedisArgument[];
            readonly transformReply: {
                readonly 2: (reply: import("@redis/client/dist/lib/RESP/types").UnwrapReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>) => number | (number | null)[];
                readonly 3: () => import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").NumberReply<number> | import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").DoubleReply<number>>;
            };
        };
        numIncrBy: {
            readonly FIRST_KEY_INDEX: 1;
            readonly IS_READ_ONLY: false;
            readonly transformArguments: (this: void, key: import("@redis/client").RedisArgument, path: import("@redis/client").RedisArgument, by: number) => import("@redis/client").RedisArgument[];
            readonly transformReply: {
                readonly 2: (reply: import("@redis/client/dist/lib/RESP/types").UnwrapReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>) => number | (number | null)[];
                readonly 3: () => import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").NumberReply<number> | import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").DoubleReply<number>>;
            };
        };
        NUMMULTBY: {
            readonly FIRST_KEY_INDEX: 1;
            readonly IS_READ_ONLY: false;
            readonly transformArguments: (this: void, key: import("@redis/client").RedisArgument, path: import("@redis/client").RedisArgument, by: number) => import("@redis/client").RedisArgument[];
            readonly transformReply: {
                readonly 2: (reply: import("@redis/client/dist/lib/RESP/types").UnwrapReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>) => number | (number | null)[];
                readonly 3: () => import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").NumberReply<number> | import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").DoubleReply<number>>;
            };
        };
        numMultBy: {
            readonly FIRST_KEY_INDEX: 1;
            readonly IS_READ_ONLY: false;
            readonly transformArguments: (this: void, key: import("@redis/client").RedisArgument, path: import("@redis/client").RedisArgument, by: number) => import("@redis/client").RedisArgument[];
            readonly transformReply: {
                readonly 2: (reply: import("@redis/client/dist/lib/RESP/types").UnwrapReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>) => number | (number | null)[];
                readonly 3: () => import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").NumberReply<number> | import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").DoubleReply<number>>;
            };
        };
        OBJKEYS: {
            readonly FIRST_KEY_INDEX: 1;
            readonly IS_READ_ONLY: false;
            readonly transformArguments: (this: void, key: import("@redis/client").RedisArgument, options?: import("@redis/json/dist/lib/commands/OBJKEYS").JsonObjKeysOptions | undefined) => import("@redis/client").RedisArgument[];
            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>> | import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>> | import("@redis/client/dist/lib/RESP/types").NullReply>;
        };
        objKeys: {
            readonly FIRST_KEY_INDEX: 1;
            readonly IS_READ_ONLY: false;
            readonly transformArguments: (this: void, key: import("@redis/client").RedisArgument, options?: import("@redis/json/dist/lib/commands/OBJKEYS").JsonObjKeysOptions | undefined) => import("@redis/client").RedisArgument[];
            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>> | import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>> | import("@redis/client/dist/lib/RESP/types").NullReply>;
        };
        OBJLEN: {
            readonly FIRST_KEY_INDEX: 1;
            readonly IS_READ_ONLY: true;
            readonly transformArguments: (this: void, key: import("@redis/client").RedisArgument, options?: import("@redis/json/dist/lib/commands/OBJLEN").JsonObjLenOptions | undefined) => import("@redis/client").RedisArgument[];
            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").NumberReply<number> | import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").NumberReply<number> | import("@redis/client/dist/lib/RESP/types").NullReply>;
        };
        objLen: {
            readonly FIRST_KEY_INDEX: 1;
            readonly IS_READ_ONLY: true;
            readonly transformArguments: (this: void, key: import("@redis/client").RedisArgument, options?: import("@redis/json/dist/lib/commands/OBJLEN").JsonObjLenOptions | undefined) => import("@redis/client").RedisArgument[];
            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").NumberReply<number> | import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").NumberReply<number> | import("@redis/client/dist/lib/RESP/types").NullReply>;
        };
        SET: {
            readonly FIRST_KEY_INDEX: 1;
            readonly IS_READ_ONLY: false;
            readonly transformArguments: (this: void, key: import("@redis/client").RedisArgument, path: import("@redis/client").RedisArgument, json: import("@redis/json/dist/lib/commands").RedisJSON, options?: import("@redis/json/dist/lib/commands/SET").JsonSetOptions | undefined) => import("@redis/client").RedisArgument[];
            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"OK">;
        };
        set: {
            readonly FIRST_KEY_INDEX: 1;
            readonly IS_READ_ONLY: false;
            readonly transformArguments: (this: void, key: import("@redis/client").RedisArgument, path: import("@redis/client").RedisArgument, json: import("@redis/json/dist/lib/commands").RedisJSON, options?: import("@redis/json/dist/lib/commands/SET").JsonSetOptions | undefined) => import("@redis/client").RedisArgument[];
            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"OK">;
        };
        STRAPPEND: {
            readonly FIRST_KEY_INDEX: 1;
            readonly IS_READ_ONLY: false;
            readonly transformArguments: (this: void, key: import("@redis/client").RedisArgument, append: string, options?: import("@redis/json/dist/lib/commands/STRAPPEND").JsonStrAppendOptions | undefined) => import("@redis/client").RedisArgument[];
            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").NumberReply<number> | import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").NumberReply<number> | import("@redis/client/dist/lib/RESP/types").NullReply>;
        };
        strAppend: {
            readonly FIRST_KEY_INDEX: 1;
            readonly IS_READ_ONLY: false;
            readonly transformArguments: (this: void, key: import("@redis/client").RedisArgument, append: string, options?: import("@redis/json/dist/lib/commands/STRAPPEND").JsonStrAppendOptions | undefined) => import("@redis/client").RedisArgument[];
            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").NumberReply<number> | import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").NumberReply<number> | import("@redis/client/dist/lib/RESP/types").NullReply>;
        };
        STRLEN: {
            readonly FIRST_KEY_INDEX: 1;
            readonly IS_READ_ONLY: true;
            readonly transformArguments: (this: void, key: import("@redis/client").RedisArgument, options?: import("@redis/json/dist/lib/commands/STRLEN").JsonStrLenOptions | undefined) => import("@redis/client").RedisArgument[];
            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").NumberReply<number> | import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").NumberReply<number> | import("@redis/client/dist/lib/RESP/types").NullReply>;
        };
        strLen: {
            readonly FIRST_KEY_INDEX: 1;
            readonly IS_READ_ONLY: true;
            readonly transformArguments: (this: void, key: import("@redis/client").RedisArgument, options?: import("@redis/json/dist/lib/commands/STRLEN").JsonStrLenOptions | undefined) => import("@redis/client").RedisArgument[];
            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").NumberReply<number> | import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").NumberReply<number> | import("@redis/client/dist/lib/RESP/types").NullReply>;
        };
        TOGGLE: {
            readonly FIRST_KEY_INDEX: 1;
            readonly IS_READ_ONLY: false;
            readonly transformArguments: (this: void, key: import("@redis/client").RedisArgument, path: import("@redis/client").RedisArgument) => import("@redis/client").RedisArgument[];
            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").NumberReply<number> | import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").NumberReply<number> | import("@redis/client/dist/lib/RESP/types").NullReply>;
        };
        toggle: {
            readonly FIRST_KEY_INDEX: 1;
            readonly IS_READ_ONLY: false;
            readonly transformArguments: (this: void, key: import("@redis/client").RedisArgument, path: import("@redis/client").RedisArgument) => import("@redis/client").RedisArgument[];
            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").NumberReply<number> | import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").NumberReply<number> | import("@redis/client/dist/lib/RESP/types").NullReply>;
        };
        TYPE: {
            readonly FIRST_KEY_INDEX: 1;
            readonly IS_READ_ONLY: true;
            readonly transformArguments: (this: void, key: import("@redis/client").RedisArgument, options?: import("@redis/json/dist/lib/commands/TYPE").JsonTypeOptions | undefined) => import("@redis/client").RedisArgument[];
            readonly transformReply: {
                readonly 2: () => import("@redis/client/dist/lib/RESP/types").BlobStringReply<string> | import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>> | import("@redis/client/dist/lib/RESP/types").NullReply;
                readonly 3: () => any;
            };
        };
        type: {
            readonly FIRST_KEY_INDEX: 1;
            readonly IS_READ_ONLY: true;
            readonly transformArguments: (this: void, key: import("@redis/client").RedisArgument, options?: import("@redis/json/dist/lib/commands/TYPE").JsonTypeOptions | undefined) => import("@redis/client").RedisArgument[];
            readonly transformReply: {
                readonly 2: () => import("@redis/client/dist/lib/RESP/types").BlobStringReply<string> | import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>> | import("@redis/client/dist/lib/RESP/types").NullReply;
                readonly 3: () => any;
            };
        };
    };
    ft: {
        _LIST: {
            readonly FIRST_KEY_INDEX: undefined;
            readonly IS_READ_ONLY: true;
            readonly transformArguments: (this: void) => string[];
            readonly transformReply: {
                readonly 2: () => import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>;
                readonly 3: () => import("@redis/client/dist/lib/RESP/types").SetReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>;
            };
        };
        _list: {
            readonly FIRST_KEY_INDEX: undefined;
            readonly IS_READ_ONLY: true;
            readonly transformArguments: (this: void) => string[];
            readonly transformReply: {
                readonly 2: () => import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>;
                readonly 3: () => import("@redis/client/dist/lib/RESP/types").SetReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>;
            };
        };
        ALTER: {
            readonly FIRST_KEY_INDEX: undefined;
            readonly IS_READ_ONLY: true;
            readonly transformArguments: (this: void, index: import("@redis/client").RedisArgument, schema: import("@redis/search/dist/lib/commands/CREATE").RediSearchSchema) => import("@redis/client").RedisArgument[];
            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"OK">;
        };
        alter: {
            readonly FIRST_KEY_INDEX: undefined;
            readonly IS_READ_ONLY: true;
            readonly transformArguments: (this: void, index: import("@redis/client").RedisArgument, schema: import("@redis/search/dist/lib/commands/CREATE").RediSearchSchema) => import("@redis/client").RedisArgument[];
            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"OK">;
        };
        AGGREGATE_WITHCURSOR: {
            readonly FIRST_KEY_INDEX: undefined;
            readonly IS_READ_ONLY: false;
            readonly transformArguments: (this: void, index: import("@redis/client").RedisArgument, query: import("@redis/client").RedisArgument, options?: import("@redis/search/dist/lib/commands/AGGREGATE_WITHCURSOR").FtAggregateWithCursorOptions | undefined) => import("@redis/client").RedisArgument[];
            readonly transformReply: () => any;
        };
        aggregateWithCursor: {
            readonly FIRST_KEY_INDEX: undefined;
            readonly IS_READ_ONLY: false;
            readonly transformArguments: (this: void, index: import("@redis/client").RedisArgument, query: import("@redis/client").RedisArgument, options?: import("@redis/search/dist/lib/commands/AGGREGATE_WITHCURSOR").FtAggregateWithCursorOptions | undefined) => import("@redis/client").RedisArgument[];
            readonly transformReply: () => any;
        };
        AGGREGATE: {
            readonly FIRST_KEY_INDEX: undefined;
            readonly IS_READ_ONLY: false;
            readonly transformArguments: (this: void, index: import("@redis/client").RedisArgument, query: import("@redis/client").RedisArgument, options?: import("@redis/search/dist/lib/commands/AGGREGATE").FtAggregateOptions | undefined) => import("@redis/client").RedisArgument[];
            readonly transformReply: () => any;
        };
        aggregate: {
            readonly FIRST_KEY_INDEX: undefined;
            readonly IS_READ_ONLY: false;
            readonly transformArguments: (this: void, index: import("@redis/client").RedisArgument, query: import("@redis/client").RedisArgument, options?: import("@redis/search/dist/lib/commands/AGGREGATE").FtAggregateOptions | undefined) => import("@redis/client").RedisArgument[];
            readonly transformReply: () => any;
        };
        ALIASADD: {
            readonly FIRST_KEY_INDEX: undefined;
            readonly IS_READ_ONLY: true;
            readonly transformArguments: (this: void, alias: import("@redis/client").RedisArgument, index: import("@redis/client").RedisArgument) => import("@redis/client").RedisArgument[];
            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"OK">;
        };
        aliasAdd: {
            readonly FIRST_KEY_INDEX: undefined;
            readonly IS_READ_ONLY: true;
            readonly transformArguments: (this: void, alias: import("@redis/client").RedisArgument, index: import("@redis/client").RedisArgument) => import("@redis/client").RedisArgument[];
            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"OK">;
        };
        ALIASDEL: {
            readonly FIRST_KEY_INDEX: undefined;
            readonly IS_READ_ONLY: true;
            readonly transformArguments: (this: void, alias: import("@redis/client").RedisArgument) => import("@redis/client").RedisArgument[];
            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"OK">;
        };
        aliasDel: {
            readonly FIRST_KEY_INDEX: undefined;
            readonly IS_READ_ONLY: true;
            readonly transformArguments: (this: void, alias: import("@redis/client").RedisArgument) => import("@redis/client").RedisArgument[];
            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"OK">;
        };
        ALIASUPDATE: {
            readonly FIRST_KEY_INDEX: undefined;
            readonly IS_READ_ONLY: true;
            readonly transformArguments: (this: void, alias: import("@redis/client").RedisArgument, index: import("@redis/client").RedisArgument) => import("@redis/client").RedisArgument[];
            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"OK">;
        };
        aliasUpdate: {
            readonly FIRST_KEY_INDEX: undefined;
            readonly IS_READ_ONLY: true;
            readonly transformArguments: (this: void, alias: import("@redis/client").RedisArgument, index: import("@redis/client").RedisArgument) => import("@redis/client").RedisArgument[];
            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"OK">;
        };
        CONFIG_GET: {
            readonly FIRST_KEY_INDEX: undefined;
            readonly IS_READ_ONLY: true;
            readonly transformArguments: (this: void, option: string) => string[];
            readonly transformReply: (this: void, reply: import("@redis/client/dist/lib/RESP/types").TuplesReply<[import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, import("@redis/client/dist/lib/RESP/types").BlobStringReply<string> | import("@redis/client/dist/lib/RESP/types").NullReply]>[]) => Record<string, import("@redis/client/dist/lib/RESP/types").BlobStringReply<string> | import("@redis/client/dist/lib/RESP/types").NullReply>;
        };
        configGet: {
            readonly FIRST_KEY_INDEX: undefined;
            readonly IS_READ_ONLY: true;
            readonly transformArguments: (this: void, option: string) => string[];
            readonly transformReply: (this: void, reply: import("@redis/client/dist/lib/RESP/types").TuplesReply<[import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, import("@redis/client/dist/lib/RESP/types").BlobStringReply<string> | import("@redis/client/dist/lib/RESP/types").NullReply]>[]) => Record<string, import("@redis/client/dist/lib/RESP/types").BlobStringReply<string> | import("@redis/client/dist/lib/RESP/types").NullReply>;
        };
        CONFIG_SET: {
            readonly FIRST_KEY_INDEX: undefined;
            readonly IS_READ_ONLY: true;
            readonly transformArguments: (this: void, property: Buffer | "a" | "b" | (string & {}), value: import("@redis/client").RedisArgument) => (string | Buffer)[];
            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"OK">;
        };
        configSet: {
            readonly FIRST_KEY_INDEX: undefined;
            readonly IS_READ_ONLY: true;
            readonly transformArguments: (this: void, property: Buffer | "a" | "b" | (string & {}), value: import("@redis/client").RedisArgument) => (string | Buffer)[];
            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"OK">;
        };
        CREATE: {
            readonly FIRST_KEY_INDEX: undefined;
            readonly IS_READ_ONLY: true;
            readonly transformArguments: (this: void, index: import("@redis/client").RedisArgument, schema: import("@redis/search/dist/lib/commands/CREATE").RediSearchSchema, options?: import("@redis/search/dist/lib/commands/CREATE").CreateOptions | undefined) => import("@redis/client").RedisArgument[];
            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"OK">;
        };
        create: {
            readonly FIRST_KEY_INDEX: undefined;
            readonly IS_READ_ONLY: true;
            readonly transformArguments: (this: void, index: import("@redis/client").RedisArgument, schema: import("@redis/search/dist/lib/commands/CREATE").RediSearchSchema, options?: import("@redis/search/dist/lib/commands/CREATE").CreateOptions | undefined) => import("@redis/client").RedisArgument[];
            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"OK">;
        };
        CURSOR_DEL: {
            readonly FIRST_KEY_INDEX: undefined;
            readonly IS_READ_ONLY: true;
            readonly transformArguments: (this: void, index: import("@redis/client").RedisArgument, cursorId: import("@redis/client").RedisArgument) => import("@redis/client").RedisArgument[];
            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"OK">;
        };
        cursorDel: {
            readonly FIRST_KEY_INDEX: undefined;
            readonly IS_READ_ONLY: true;
            readonly transformArguments: (this: void, index: import("@redis/client").RedisArgument, cursorId: import("@redis/client").RedisArgument) => import("@redis/client").RedisArgument[];
            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"OK">;
        };
        CURSOR_READ: {
            readonly FIRST_KEY_INDEX: undefined;
            readonly IS_READ_ONLY: true;
            readonly transformArguments: (this: void, index: import("@redis/client").RedisArgument, cursor: import("@redis/client").RedisArgument, options?: import("@redis/search/dist/lib/commands/CURSOR_READ").FtCursorReadOptions | undefined) => import("@redis/client").RedisArgument[];
            readonly transformReply: () => any;
        };
        cursorRead: {
            readonly FIRST_KEY_INDEX: undefined;
            readonly IS_READ_ONLY: true;
            readonly transformArguments: (this: void, index: import("@redis/client").RedisArgument, cursor: import("@redis/client").RedisArgument, options?: import("@redis/search/dist/lib/commands/CURSOR_READ").FtCursorReadOptions | undefined) => import("@redis/client").RedisArgument[];
            readonly transformReply: () => any;
        };
        DICTADD: {
            readonly FIRST_KEY_INDEX: undefined;
            readonly IS_READ_ONLY: true;
            readonly transformArguments: (this: void, dictionary: import("@redis/client").RedisArgument, term: import("@redis/client/dist/lib/commands/generic-transformers").RedisVariadicArgument) => import("@redis/client/dist/lib/RESP/types").CommandArguments;
            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
        };
        dictAdd: {
            readonly FIRST_KEY_INDEX: undefined;
            readonly IS_READ_ONLY: true;
            readonly transformArguments: (this: void, dictionary: import("@redis/client").RedisArgument, term: import("@redis/client/dist/lib/commands/generic-transformers").RedisVariadicArgument) => import("@redis/client/dist/lib/RESP/types").CommandArguments;
            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
        };
        DICTDEL: {
            readonly FIRST_KEY_INDEX: undefined;
            readonly IS_READ_ONLY: true;
            readonly transformArguments: (this: void, dictionary: import("@redis/client").RedisArgument, term: import("@redis/client/dist/lib/commands/generic-transformers").RedisVariadicArgument) => import("@redis/client/dist/lib/RESP/types").CommandArguments;
            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
        };
        dictDel: {
            readonly FIRST_KEY_INDEX: undefined;
            readonly IS_READ_ONLY: true;
            readonly transformArguments: (this: void, dictionary: import("@redis/client").RedisArgument, term: import("@redis/client/dist/lib/commands/generic-transformers").RedisVariadicArgument) => import("@redis/client/dist/lib/RESP/types").CommandArguments;
            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
        };
        DICTDUMP: {
            readonly FIRST_KEY_INDEX: undefined;
            readonly IS_READ_ONLY: true;
            readonly transformArguments: (this: void, dictionary: import("@redis/client").RedisArgument) => import("@redis/client").RedisArgument[];
            readonly transformReply: {
                readonly 2: () => import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>;
                readonly 3: () => import("@redis/client/dist/lib/RESP/types").SetReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>;
            };
        };
        dictDump: {
            readonly FIRST_KEY_INDEX: undefined;
            readonly IS_READ_ONLY: true;
            readonly transformArguments: (this: void, dictionary: import("@redis/client").RedisArgument) => import("@redis/client").RedisArgument[];
            readonly transformReply: {
                readonly 2: () => import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>;
                readonly 3: () => import("@redis/client/dist/lib/RESP/types").SetReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>;
            };
        };
        DROPINDEX: {
            readonly FIRST_KEY_INDEX: undefined;
            readonly IS_READ_ONLY: true;
            readonly transformArguments: (this: void, index: import("@redis/client").RedisArgument, options?: import("@redis/search/dist/lib/commands/DROPINDEX").FtDropIndexOptions | undefined) => import("@redis/client").RedisArgument[];
            readonly transformReply: {
                readonly 2: () => import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"OK">;
                readonly 3: () => import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
            };
        };
        dropIndex: {
            readonly FIRST_KEY_INDEX: undefined;
            readonly IS_READ_ONLY: true;
            readonly transformArguments: (this: void, index: import("@redis/client").RedisArgument, options?: import("@redis/search/dist/lib/commands/DROPINDEX").FtDropIndexOptions | undefined) => import("@redis/client").RedisArgument[];
            readonly transformReply: {
                readonly 2: () => import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"OK">;
                readonly 3: () => import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
            };
        };
        SEARCH_NOCONTENT: {
            readonly FIRST_KEY_INDEX: undefined;
            readonly IS_READ_ONLY: true;
            readonly transformArguments: (this: void, index: import("@redis/client").RedisArgument, query: import("@redis/client").RedisArgument, options?: import("@redis/search/dist/lib/commands/SEARCH").FtSearchOptions | undefined) => import("@redis/client").RedisArgument[];
            readonly transformReply: () => any;
        };
        searchNoContent: {
            readonly FIRST_KEY_INDEX: undefined;
            readonly IS_READ_ONLY: true;
            readonly transformArguments: (this: void, index: import("@redis/client").RedisArgument, query: import("@redis/client").RedisArgument, options?: import("@redis/search/dist/lib/commands/SEARCH").FtSearchOptions | undefined) => import("@redis/client").RedisArgument[];
            readonly transformReply: () => any;
        };
        SEARCH: {
            readonly FIRST_KEY_INDEX: undefined;
            readonly IS_READ_ONLY: true;
            readonly transformArguments: (this: void, index: import("@redis/client").RedisArgument, query: import("@redis/client").RedisArgument, options?: import("@redis/search/dist/lib/commands/SEARCH").FtSearchOptions | undefined) => import("@redis/client").RedisArgument[];
            readonly transformReply: () => any;
        };
        search: {
            readonly FIRST_KEY_INDEX: undefined;
            readonly IS_READ_ONLY: true;
            readonly transformArguments: (this: void, index: import("@redis/client").RedisArgument, query: import("@redis/client").RedisArgument, options?: import("@redis/search/dist/lib/commands/SEARCH").FtSearchOptions | undefined) => import("@redis/client").RedisArgument[];
            readonly transformReply: () => any;
        };
        SPELLCHECK: {
            readonly FIRST_KEY_INDEX: undefined;
            readonly IS_READ_ONLY: true;
            readonly transformArguments: (this: void, index: import("@redis/client").RedisArgument, query: import("@redis/client").RedisArgument, options?: import("@redis/search/dist/lib/commands/SPELLCHECK").FtSpellCheckOptions | undefined) => import("@redis/client").RedisArgument[];
            readonly transformReply: () => any;
        };
        spellCheck: {
            readonly FIRST_KEY_INDEX: undefined;
            readonly IS_READ_ONLY: true;
            readonly transformArguments: (this: void, index: import("@redis/client").RedisArgument, query: import("@redis/client").RedisArgument, options?: import("@redis/search/dist/lib/commands/SPELLCHECK").FtSpellCheckOptions | undefined) => import("@redis/client").RedisArgument[];
            readonly transformReply: () => any;
        };
        SUGADD: {
            readonly FIRST_KEY_INDEX: undefined;
            readonly IS_READ_ONLY: true;
            readonly transformArguments: (this: void, key: import("@redis/client").RedisArgument, string: import("@redis/client").RedisArgument, score: number, options?: import("@redis/search/dist/lib/commands/SUGADD").FtSugAddOptions | undefined) => import("@redis/client").RedisArgument[];
            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
        };
        sugAdd: {
            readonly FIRST_KEY_INDEX: undefined;
            readonly IS_READ_ONLY: true;
            readonly transformArguments: (this: void, key: import("@redis/client").RedisArgument, string: import("@redis/client").RedisArgument, score: number, options?: import("@redis/search/dist/lib/commands/SUGADD").FtSugAddOptions | undefined) => import("@redis/client").RedisArgument[];
            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
        };
        SUGDEL: {
            readonly FIRST_KEY_INDEX: undefined;
            readonly IS_READ_ONLY: true;
            readonly transformArguments: (this: void, key: import("@redis/client").RedisArgument, string: import("@redis/client").RedisArgument) => import("@redis/client").RedisArgument[];
            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").NumberReply<0 | 1>;
        };
        sugDel: {
            readonly FIRST_KEY_INDEX: undefined;
            readonly IS_READ_ONLY: true;
            readonly transformArguments: (this: void, key: import("@redis/client").RedisArgument, string: import("@redis/client").RedisArgument) => import("@redis/client").RedisArgument[];
            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").NumberReply<0 | 1>;
        };
        SUGGET_WITHPAYLOADS: {
            readonly FIRST_KEY_INDEX: undefined;
            readonly IS_READ_ONLY: true;
            readonly transformArguments: (this: void, key: import("@redis/client").RedisArgument, prefix: import("@redis/client").RedisArgument, options?: import("@redis/search/dist/lib/commands/SUGGET").FtSugGetOptions | undefined) => import("@redis/client").RedisArgument[];
            readonly transformReply: (this: void, reply: import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>[]) => {
                suggestion: import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>;
                payload: import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>;
            }[] | null;
        };
        sugGetWithPayloads: {
            readonly FIRST_KEY_INDEX: undefined;
            readonly IS_READ_ONLY: true;
            readonly transformArguments: (this: void, key: import("@redis/client").RedisArgument, prefix: import("@redis/client").RedisArgument, options?: import("@redis/search/dist/lib/commands/SUGGET").FtSugGetOptions | undefined) => import("@redis/client").RedisArgument[];
            readonly transformReply: (this: void, reply: import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>[]) => {
                suggestion: import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>;
                payload: import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>;
            }[] | null;
        };
        SUGGET_WITHSCORES_WITHPAYLOADS: {
            readonly FIRST_KEY_INDEX: undefined;
            readonly IS_READ_ONLY: true;
            readonly transformArguments: (this: void, key: import("@redis/client").RedisArgument, prefix: import("@redis/client").RedisArgument, options?: import("@redis/search/dist/lib/commands/SUGGET").FtSugGetOptions | undefined) => import("@redis/client").RedisArgument[];
            readonly transformReply: {
                readonly 2: (this: void, reply: import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>[]) => {
                    suggestion: import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>;
                    score: number;
                    payload: import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>;
                }[] | null;
                readonly 3: (this: void, reply: import("@redis/client/dist/lib/RESP/types").NullReply | (import("@redis/client/dist/lib/RESP/types").BlobStringReply<string> | import("@redis/client/dist/lib/RESP/types").DoubleReply<number>)[]) => {
                    suggestion: import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>;
                    score: import("@redis/client/dist/lib/RESP/types").DoubleReply<number>;
                    payload: import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>;
                }[] | null;
            };
        };
        sugGetWithScoresWithPayloads: {
            readonly FIRST_KEY_INDEX: undefined;
            readonly IS_READ_ONLY: true;
            readonly transformArguments: (this: void, key: import("@redis/client").RedisArgument, prefix: import("@redis/client").RedisArgument, options?: import("@redis/search/dist/lib/commands/SUGGET").FtSugGetOptions | undefined) => import("@redis/client").RedisArgument[];
            readonly transformReply: {
                readonly 2: (this: void, reply: import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>[]) => {
                    suggestion: import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>;
                    score: number;
                    payload: import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>;
                }[] | null;
                readonly 3: (this: void, reply: import("@redis/client/dist/lib/RESP/types").NullReply | (import("@redis/client/dist/lib/RESP/types").BlobStringReply<string> | import("@redis/client/dist/lib/RESP/types").DoubleReply<number>)[]) => {
                    suggestion: import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>;
                    score: import("@redis/client/dist/lib/RESP/types").DoubleReply<number>;
                    payload: import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>;
                }[] | null;
            };
        };
        SUGGET_WITHSCORES: {
            readonly FIRST_KEY_INDEX: undefined;
            readonly IS_READ_ONLY: true;
            readonly transformArguments: (this: void, key: import("@redis/client").RedisArgument, prefix: import("@redis/client").RedisArgument, options?: import("@redis/search/dist/lib/commands/SUGGET").FtSugGetOptions | undefined) => import("@redis/client").RedisArgument[];
            readonly transformReply: {
                readonly 2: (this: void, reply: import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>[]) => {
                    suggestion: import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>;
                    score: number;
                }[] | null;
                readonly 3: (this: void, reply: (import("@redis/client/dist/lib/RESP/types").BlobStringReply<string> | import("@redis/client/dist/lib/RESP/types").DoubleReply<number>)[]) => {
                    suggestion: import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>;
                    score: import("@redis/client/dist/lib/RESP/types").DoubleReply<number>;
                }[] | null;
            };
        };
        sugGetWithScores: {
            readonly FIRST_KEY_INDEX: undefined;
            readonly IS_READ_ONLY: true;
            readonly transformArguments: (this: void, key: import("@redis/client").RedisArgument, prefix: import("@redis/client").RedisArgument, options?: import("@redis/search/dist/lib/commands/SUGGET").FtSugGetOptions | undefined) => import("@redis/client").RedisArgument[];
            readonly transformReply: {
                readonly 2: (this: void, reply: import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>[]) => {
                    suggestion: import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>;
                    score: number;
                }[] | null;
                readonly 3: (this: void, reply: (import("@redis/client/dist/lib/RESP/types").BlobStringReply<string> | import("@redis/client/dist/lib/RESP/types").DoubleReply<number>)[]) => {
                    suggestion: import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>;
                    score: import("@redis/client/dist/lib/RESP/types").DoubleReply<number>;
                }[] | null;
            };
        };
        SUGGET: {
            readonly FIRST_KEY_INDEX: undefined;
            readonly IS_READ_ONLY: true;
            readonly transformArguments: (this: void, key: import("@redis/client").RedisArgument, prefix: import("@redis/client").RedisArgument, options?: import("@redis/search/dist/lib/commands/SUGGET").FtSugGetOptions | undefined) => import("@redis/client").RedisArgument[];
            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>> | import("@redis/client/dist/lib/RESP/types").NullReply;
        };
        sugGet: {
            readonly FIRST_KEY_INDEX: undefined;
            readonly IS_READ_ONLY: true;
            readonly transformArguments: (this: void, key: import("@redis/client").RedisArgument, prefix: import("@redis/client").RedisArgument, options?: import("@redis/search/dist/lib/commands/SUGGET").FtSugGetOptions | undefined) => import("@redis/client").RedisArgument[];
            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>> | import("@redis/client/dist/lib/RESP/types").NullReply;
        };
        SUGLEN: {
            readonly FIRST_KEY_INDEX: undefined;
            readonly IS_READ_ONLY: true;
            readonly transformArguments: (this: void, key: import("@redis/client").RedisArgument) => import("@redis/client").RedisArgument[];
            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
        };
        sugLen: {
            readonly FIRST_KEY_INDEX: undefined;
            readonly IS_READ_ONLY: true;
            readonly transformArguments: (this: void, key: import("@redis/client").RedisArgument) => import("@redis/client").RedisArgument[];
            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
        };
        SYNDUMP: {
            readonly FIRST_KEY_INDEX: undefined;
            readonly IS_READ_ONLY: true;
            readonly transformArguments: (this: void, index: import("@redis/client").RedisArgument) => import("@redis/client").RedisArgument[];
            readonly transformReply: {
                readonly 2: (reply: (import("@redis/client/dist/lib/RESP/types").BlobStringReply<string> | import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>)[]) => Record<string, import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>>;
                readonly 3: () => import("@redis/client/dist/lib/RESP/types").MapReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>>;
            };
        };
        synDump: {
            readonly FIRST_KEY_INDEX: undefined;
            readonly IS_READ_ONLY: true;
            readonly transformArguments: (this: void, index: import("@redis/client").RedisArgument) => import("@redis/client").RedisArgument[];
            readonly transformReply: {
                readonly 2: (reply: (import("@redis/client/dist/lib/RESP/types").BlobStringReply<string> | import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>)[]) => Record<string, import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>>;
                readonly 3: () => import("@redis/client/dist/lib/RESP/types").MapReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>, import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>>;
            };
        };
        SYNUPDATE: {
            readonly FIRST_KEY_INDEX: undefined;
            readonly IS_READ_ONLY: true;
            readonly transformArguments: (this: void, index: import("@redis/client").RedisArgument, groupId: import("@redis/client").RedisArgument, terms: import("@redis/client/dist/lib/commands/generic-transformers").RedisVariadicArgument, options?: import("@redis/search/dist/lib/commands/SYNUPDATE").FtSynUpdateOptions | undefined) => import("@redis/client/dist/lib/RESP/types").CommandArguments;
            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"OK">;
        };
        synUpdate: {
            readonly FIRST_KEY_INDEX: undefined;
            readonly IS_READ_ONLY: true;
            readonly transformArguments: (this: void, index: import("@redis/client").RedisArgument, groupId: import("@redis/client").RedisArgument, terms: import("@redis/client/dist/lib/commands/generic-transformers").RedisVariadicArgument, options?: import("@redis/search/dist/lib/commands/SYNUPDATE").FtSynUpdateOptions | undefined) => import("@redis/client/dist/lib/RESP/types").CommandArguments;
            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"OK">;
        };
        TAGVALS: {
            readonly FIRST_KEY_INDEX: undefined;
            readonly IS_READ_ONLY: true;
            readonly transformArguments: (this: void, index: import("@redis/client").RedisArgument, fieldName: import("@redis/client").RedisArgument) => import("@redis/client").RedisArgument[];
            readonly transformReply: {
                readonly 2: () => import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>;
                readonly 3: () => import("@redis/client/dist/lib/RESP/types").SetReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>;
            };
        };
        tagVals: {
            readonly FIRST_KEY_INDEX: undefined;
            readonly IS_READ_ONLY: true;
            readonly transformArguments: (this: void, index: import("@redis/client").RedisArgument, fieldName: import("@redis/client").RedisArgument) => import("@redis/client").RedisArgument[];
            readonly transformReply: {
                readonly 2: () => import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>;
                readonly 3: () => import("@redis/client/dist/lib/RESP/types").SetReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>;
            };
        };
    };
    ts: {
        readonly ADD: {
            readonly FIRST_KEY_INDEX: 1;
            readonly IS_READ_ONLY: false;
            readonly transformArguments: (this: void, key: import("@redis/client").RedisArgument, timestamp: import("@redis/time-series/dist/lib/commands").Timestamp, value: number, options?: import("@redis/time-series/dist/lib/commands/ADD").TsAddOptions | undefined) => import("@redis/client").RedisArgument[];
            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
        };
        readonly add: {
            readonly FIRST_KEY_INDEX: 1;
            readonly IS_READ_ONLY: false;
            readonly transformArguments: (this: void, key: import("@redis/client").RedisArgument, timestamp: import("@redis/time-series/dist/lib/commands").Timestamp, value: number, options?: import("@redis/time-series/dist/lib/commands/ADD").TsAddOptions | undefined) => import("@redis/client").RedisArgument[];
            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
        };
        readonly ALTER: {
            readonly FIRST_KEY_INDEX: 1;
            readonly IS_READ_ONLY: false;
            readonly transformArguments: (this: void, key: import("@redis/client").RedisArgument, options?: import("@redis/time-series/dist/lib/commands/ALTER").TsAlterOptions | undefined) => import("@redis/client").RedisArgument[];
            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"OK">;
        };
        readonly alter: {
            readonly FIRST_KEY_INDEX: 1;
            readonly IS_READ_ONLY: false;
            readonly transformArguments: (this: void, key: import("@redis/client").RedisArgument, options?: import("@redis/time-series/dist/lib/commands/ALTER").TsAlterOptions | undefined) => import("@redis/client").RedisArgument[];
            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"OK">;
        };
        readonly CREATE: {
            readonly FIRST_KEY_INDEX: 1;
            readonly IS_READ_ONLY: false;
            readonly transformArguments: (this: void, key: import("@redis/client").RedisArgument, options?: import("@redis/time-series/dist/lib/commands/CREATE").TsCreateOptions | undefined) => import("@redis/client").RedisArgument[];
            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"OK">;
        };
        readonly create: {
            readonly FIRST_KEY_INDEX: 1;
            readonly IS_READ_ONLY: false;
            readonly transformArguments: (this: void, key: import("@redis/client").RedisArgument, options?: import("@redis/time-series/dist/lib/commands/CREATE").TsCreateOptions | undefined) => import("@redis/client").RedisArgument[];
            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"OK">;
        };
        readonly CREATERULE: {
            readonly FIRST_KEY_INDEX: 1;
            readonly IS_READ_ONLY: false;
            readonly transformArguments: (this: void, sourceKey: import("@redis/client").RedisArgument, destinationKey: import("@redis/client").RedisArgument, aggregationType: import("@redis/time-series").TimeSeriesAggregationType, bucketDuration: number, alignTimestamp?: number | undefined) => (string | Buffer)[];
            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"OK">;
        };
        readonly createRule: {
            readonly FIRST_KEY_INDEX: 1;
            readonly IS_READ_ONLY: false;
            readonly transformArguments: (this: void, sourceKey: import("@redis/client").RedisArgument, destinationKey: import("@redis/client").RedisArgument, aggregationType: import("@redis/time-series").TimeSeriesAggregationType, bucketDuration: number, alignTimestamp?: number | undefined) => (string | Buffer)[];
            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"OK">;
        };
        readonly DECRBY: {
            readonly FIRST_KEY_INDEX: 1;
            readonly IS_READ_ONLY: false;
            readonly transformArguments: (key: import("@redis/client").RedisArgument, value: number, options?: import("@redis/time-series/dist/lib/commands/INCRBY").TsIncrByOptions | undefined) => import("@redis/client").RedisArgument[];
            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
        };
        readonly decrBy: {
            readonly FIRST_KEY_INDEX: 1;
            readonly IS_READ_ONLY: false;
            readonly transformArguments: (key: import("@redis/client").RedisArgument, value: number, options?: import("@redis/time-series/dist/lib/commands/INCRBY").TsIncrByOptions | undefined) => import("@redis/client").RedisArgument[];
            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
        };
        readonly DEL: {
            readonly FIRST_KEY_INDEX: 1;
            readonly IS_READ_ONLY: false;
            readonly transformArguments: (this: void, key: import("@redis/client").RedisArgument, fromTimestamp: import("@redis/time-series/dist/lib/commands").Timestamp, toTimestamp: import("@redis/time-series/dist/lib/commands").Timestamp) => import("@redis/client").RedisArgument[];
            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
        };
        readonly del: {
            readonly FIRST_KEY_INDEX: 1;
            readonly IS_READ_ONLY: false;
            readonly transformArguments: (this: void, key: import("@redis/client").RedisArgument, fromTimestamp: import("@redis/time-series/dist/lib/commands").Timestamp, toTimestamp: import("@redis/time-series/dist/lib/commands").Timestamp) => import("@redis/client").RedisArgument[];
            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
        };
        readonly DELETERULE: {
            readonly FIRST_KEY_INDEX: 1;
            readonly IS_READ_ONLY: false;
            readonly transformArguments: (this: void, sourceKey: import("@redis/client").RedisArgument, destinationKey: import("@redis/client").RedisArgument) => import("@redis/client").RedisArgument[];
            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"OK">;
        };
        readonly deleteRule: {
            readonly FIRST_KEY_INDEX: 1;
            readonly IS_READ_ONLY: false;
            readonly transformArguments: (this: void, sourceKey: import("@redis/client").RedisArgument, destinationKey: import("@redis/client").RedisArgument) => import("@redis/client").RedisArgument[];
            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"OK">;
        };
        readonly GET: {
            readonly FIRST_KEY_INDEX: 1;
            readonly IS_READ_ONLY: true;
            readonly transformArguments: (this: void, key: import("@redis/client").RedisArgument, options?: import("@redis/time-series/dist/lib/commands/GET").TsGetOptions | undefined) => import("@redis/client").RedisArgument[];
            readonly transformReply: {
                readonly 2: (this: void, reply: import("@redis/client/dist/lib/RESP/types").UnwrapReply<import("@redis/client/dist/lib/RESP/types").RespType<42, [], never, []> | import("@redis/client/dist/lib/RESP/types").RespType<42, [import("@redis/client/dist/lib/RESP/types").NumberReply<number>, import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>], never, [import("@redis/client/dist/lib/RESP/types").NumberReply<number>, import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>]>>) => {
                    timestamp: import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
                    value: number;
                } | null;
                readonly 3: (this: void, reply: import("@redis/client/dist/lib/RESP/types").UnwrapReply<import("@redis/time-series/dist/lib/commands/GET").TsGetReply>) => {
                    timestamp: import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
                    value: import("@redis/client/dist/lib/RESP/types").DoubleReply<number>;
                } | null;
            };
        };
        readonly get: {
            readonly FIRST_KEY_INDEX: 1;
            readonly IS_READ_ONLY: true;
            readonly transformArguments: (this: void, key: import("@redis/client").RedisArgument, options?: import("@redis/time-series/dist/lib/commands/GET").TsGetOptions | undefined) => import("@redis/client").RedisArgument[];
            readonly transformReply: {
                readonly 2: (this: void, reply: import("@redis/client/dist/lib/RESP/types").UnwrapReply<import("@redis/client/dist/lib/RESP/types").RespType<42, [], never, []> | import("@redis/client/dist/lib/RESP/types").RespType<42, [import("@redis/client/dist/lib/RESP/types").NumberReply<number>, import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>], never, [import("@redis/client/dist/lib/RESP/types").NumberReply<number>, import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>]>>) => {
                    timestamp: import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
                    value: number;
                } | null;
                readonly 3: (this: void, reply: import("@redis/client/dist/lib/RESP/types").UnwrapReply<import("@redis/time-series/dist/lib/commands/GET").TsGetReply>) => {
                    timestamp: import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
                    value: import("@redis/client/dist/lib/RESP/types").DoubleReply<number>;
                } | null;
            };
        };
        readonly INCRBY: {
            readonly FIRST_KEY_INDEX: 1;
            readonly IS_READ_ONLY: false;
            readonly transformArguments: (key: import("@redis/client").RedisArgument, value: number, options?: import("@redis/time-series/dist/lib/commands/INCRBY").TsIncrByOptions | undefined) => import("@redis/client").RedisArgument[];
            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
        };
        readonly incrBy: {
            readonly FIRST_KEY_INDEX: 1;
            readonly IS_READ_ONLY: false;
            readonly transformArguments: (key: import("@redis/client").RedisArgument, value: number, options?: import("@redis/time-series/dist/lib/commands/INCRBY").TsIncrByOptions | undefined) => import("@redis/client").RedisArgument[];
            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
        };
        readonly MADD: {
            readonly FIRST_KEY_INDEX: 1;
            readonly IS_READ_ONLY: false;
            readonly transformArguments: (this: void, toAdd: import("@redis/time-series/dist/lib/commands/MADD").TsMAddSample[]) => string[];
            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").NumberReply<number> | import("@redis/client/dist/lib/RESP/types").SimpleErrorReply>;
        };
        readonly mAdd: {
            readonly FIRST_KEY_INDEX: 1;
            readonly IS_READ_ONLY: false;
            readonly transformArguments: (this: void, toAdd: import("@redis/time-series/dist/lib/commands/MADD").TsMAddSample[]) => string[];
            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").NumberReply<number> | import("@redis/client/dist/lib/RESP/types").SimpleErrorReply>;
        };
        readonly MGET_WITHLABELS: {
            readonly FIRST_KEY_INDEX: undefined;
            readonly IS_READ_ONLY: true;
            readonly transformArguments: (this: void, filter: import("@redis/client/dist/lib/commands/generic-transformers").RedisVariadicArgument, options?: import("@redis/time-series/dist/lib/commands/MGET_WITHLABELS").TsMGetWithLabelsOptions | undefined) => import("@redis/client/dist/lib/RESP/types").CommandArguments;
            readonly transformReply: () => any;
        };
        readonly mGetWithLabels: {
            readonly FIRST_KEY_INDEX: undefined;
            readonly IS_READ_ONLY: true;
            readonly transformArguments: (this: void, filter: import("@redis/client/dist/lib/commands/generic-transformers").RedisVariadicArgument, options?: import("@redis/time-series/dist/lib/commands/MGET_WITHLABELS").TsMGetWithLabelsOptions | undefined) => import("@redis/client/dist/lib/RESP/types").CommandArguments;
            readonly transformReply: () => any;
        };
        readonly MGET: {
            readonly FIRST_KEY_INDEX: undefined;
            readonly IS_READ_ONLY: true;
            readonly transformArguments: (this: void, filter: import("@redis/client/dist/lib/commands/generic-transformers").RedisVariadicArgument, options?: import("@redis/time-series/dist/lib/commands/MGET").TsMGetOptions | undefined) => import("@redis/client/dist/lib/RESP/types").CommandArguments;
            readonly transformReply: () => any;
        };
        readonly mGet: {
            readonly FIRST_KEY_INDEX: undefined;
            readonly IS_READ_ONLY: true;
            readonly transformArguments: (this: void, filter: import("@redis/client/dist/lib/commands/generic-transformers").RedisVariadicArgument, options?: import("@redis/time-series/dist/lib/commands/MGET").TsMGetOptions | undefined) => import("@redis/client/dist/lib/RESP/types").CommandArguments;
            readonly transformReply: () => any;
        };
        readonly MRANGE_WITHLABELS: {
            readonly FIRST_KEY_INDEX: undefined;
            readonly IS_READ_ONLY: true;
            readonly transformArguments: (fromTimestamp: import("@redis/time-series/dist/lib/commands").Timestamp, toTimestamp: import("@redis/time-series/dist/lib/commands").Timestamp, filter: import("@redis/client/dist/lib/commands/generic-transformers").RedisVariadicArgument, options?: import("@redis/time-series/dist/lib/commands/MRANGE_WITHLABELS").TsMRangeWithLabelsOptions | undefined) => import("@redis/client/dist/lib/RESP/types").CommandArguments;
            readonly transformReply: () => any;
        };
        readonly mRangeWithLabels: {
            readonly FIRST_KEY_INDEX: undefined;
            readonly IS_READ_ONLY: true;
            readonly transformArguments: (fromTimestamp: import("@redis/time-series/dist/lib/commands").Timestamp, toTimestamp: import("@redis/time-series/dist/lib/commands").Timestamp, filter: import("@redis/client/dist/lib/commands/generic-transformers").RedisVariadicArgument, options?: import("@redis/time-series/dist/lib/commands/MRANGE_WITHLABELS").TsMRangeWithLabelsOptions | undefined) => import("@redis/client/dist/lib/RESP/types").CommandArguments;
            readonly transformReply: () => any;
        };
        readonly MRANGE: {
            readonly FIRST_KEY_INDEX: undefined;
            readonly IS_READ_ONLY: true;
            readonly transformArguments: (fromTimestamp: import("@redis/time-series/dist/lib/commands").Timestamp, toTimestamp: import("@redis/time-series/dist/lib/commands").Timestamp, filter: import("@redis/client/dist/lib/commands/generic-transformers").RedisVariadicArgument, options?: import("@redis/time-series/dist/lib/commands/MRANGE").TsMRangeOptions | undefined) => import("@redis/client/dist/lib/RESP/types").CommandArguments;
            readonly transformReply: () => any;
        };
        readonly mRange: {
            readonly FIRST_KEY_INDEX: undefined;
            readonly IS_READ_ONLY: true;
            readonly transformArguments: (fromTimestamp: import("@redis/time-series/dist/lib/commands").Timestamp, toTimestamp: import("@redis/time-series/dist/lib/commands").Timestamp, filter: import("@redis/client/dist/lib/commands/generic-transformers").RedisVariadicArgument, options?: import("@redis/time-series/dist/lib/commands/MRANGE").TsMRangeOptions | undefined) => import("@redis/client/dist/lib/RESP/types").CommandArguments;
            readonly transformReply: () => any;
        };
        readonly MREVRANGE_WITHLABELS: {
            readonly FIRST_KEY_INDEX: undefined;
            readonly IS_READ_ONLY: true;
            readonly transformArguments: (fromTimestamp: import("@redis/time-series/dist/lib/commands").Timestamp, toTimestamp: import("@redis/time-series/dist/lib/commands").Timestamp, filter: import("@redis/client/dist/lib/commands/generic-transformers").RedisVariadicArgument, options?: import("@redis/time-series/dist/lib/commands/MRANGE_WITHLABELS").TsMRangeWithLabelsOptions | undefined) => import("@redis/client/dist/lib/RESP/types").CommandArguments;
            readonly transformReply: () => any;
        };
        readonly mRevRangeWithLabels: {
            readonly FIRST_KEY_INDEX: undefined;
            readonly IS_READ_ONLY: true;
            readonly transformArguments: (fromTimestamp: import("@redis/time-series/dist/lib/commands").Timestamp, toTimestamp: import("@redis/time-series/dist/lib/commands").Timestamp, filter: import("@redis/client/dist/lib/commands/generic-transformers").RedisVariadicArgument, options?: import("@redis/time-series/dist/lib/commands/MRANGE_WITHLABELS").TsMRangeWithLabelsOptions | undefined) => import("@redis/client/dist/lib/RESP/types").CommandArguments;
            readonly transformReply: () => any;
        };
        readonly MREVRANGE: {
            readonly FIRST_KEY_INDEX: undefined;
            readonly IS_READ_ONLY: true;
            readonly transformArguments: (fromTimestamp: import("@redis/time-series/dist/lib/commands").Timestamp, toTimestamp: import("@redis/time-series/dist/lib/commands").Timestamp, filter: import("@redis/client/dist/lib/commands/generic-transformers").RedisVariadicArgument, options?: import("@redis/time-series/dist/lib/commands/MRANGE").TsMRangeOptions | undefined) => import("@redis/client/dist/lib/RESP/types").CommandArguments;
            readonly transformReply: () => any;
        };
        readonly mRevRange: {
            readonly FIRST_KEY_INDEX: undefined;
            readonly IS_READ_ONLY: true;
            readonly transformArguments: (fromTimestamp: import("@redis/time-series/dist/lib/commands").Timestamp, toTimestamp: import("@redis/time-series/dist/lib/commands").Timestamp, filter: import("@redis/client/dist/lib/commands/generic-transformers").RedisVariadicArgument, options?: import("@redis/time-series/dist/lib/commands/MRANGE").TsMRangeOptions | undefined) => import("@redis/client/dist/lib/RESP/types").CommandArguments;
            readonly transformReply: () => any;
        };
        readonly QUERYINDEX: {
            readonly FIRST_KEY_INDEX: undefined;
            readonly IS_READ_ONLY: true;
            readonly transformArguments: (this: void, filter: import("@redis/client/dist/lib/commands/generic-transformers").RedisVariadicArgument) => import("@redis/client/dist/lib/RESP/types").CommandArguments;
            readonly transformReply: {
                readonly 2: () => import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>;
                readonly 3: () => import("@redis/client/dist/lib/RESP/types").SetReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>;
            };
        };
        readonly queryIndex: {
            readonly FIRST_KEY_INDEX: undefined;
            readonly IS_READ_ONLY: true;
            readonly transformArguments: (this: void, filter: import("@redis/client/dist/lib/commands/generic-transformers").RedisVariadicArgument) => import("@redis/client/dist/lib/RESP/types").CommandArguments;
            readonly transformReply: {
                readonly 2: () => import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>;
                readonly 3: () => import("@redis/client/dist/lib/RESP/types").SetReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>;
            };
        };
        readonly RANGE: {
            readonly FIRST_KEY_INDEX: 1;
            readonly IS_READ_ONLY: true;
            readonly transformArguments: (key: import("@redis/client").RedisArgument, fromTimestamp: import("@redis/time-series/dist/lib/commands").Timestamp, toTimestamp: import("@redis/time-series/dist/lib/commands").Timestamp, options?: import("@redis/time-series/dist/lib/commands/RANGE").TsRangeOptions | undefined) => import("@redis/client/dist/lib/RESP/types").CommandArguments;
            readonly transformReply: {
                readonly 2: (this: void, reply: import("@redis/client/dist/lib/RESP/types").TuplesReply<[timestamp: import("@redis/client/dist/lib/RESP/types").NumberReply<number>, value: import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>]>[]) => {
                    timestamp: import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
                    value: number;
                }[];
                readonly 3: (this: void, reply: import("@redis/client/dist/lib/RESP/types").TuplesReply<[timestamp: import("@redis/client/dist/lib/RESP/types").NumberReply<number>, value: import("@redis/client/dist/lib/RESP/types").DoubleReply<number>]>[]) => {
                    timestamp: import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
                    value: import("@redis/client/dist/lib/RESP/types").DoubleReply<number>;
                }[];
            };
        };
        readonly range: {
            readonly FIRST_KEY_INDEX: 1;
            readonly IS_READ_ONLY: true;
            readonly transformArguments: (key: import("@redis/client").RedisArgument, fromTimestamp: import("@redis/time-series/dist/lib/commands").Timestamp, toTimestamp: import("@redis/time-series/dist/lib/commands").Timestamp, options?: import("@redis/time-series/dist/lib/commands/RANGE").TsRangeOptions | undefined) => import("@redis/client/dist/lib/RESP/types").CommandArguments;
            readonly transformReply: {
                readonly 2: (this: void, reply: import("@redis/client/dist/lib/RESP/types").TuplesReply<[timestamp: import("@redis/client/dist/lib/RESP/types").NumberReply<number>, value: import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>]>[]) => {
                    timestamp: import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
                    value: number;
                }[];
                readonly 3: (this: void, reply: import("@redis/client/dist/lib/RESP/types").TuplesReply<[timestamp: import("@redis/client/dist/lib/RESP/types").NumberReply<number>, value: import("@redis/client/dist/lib/RESP/types").DoubleReply<number>]>[]) => {
                    timestamp: import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
                    value: import("@redis/client/dist/lib/RESP/types").DoubleReply<number>;
                }[];
            };
        };
        readonly REVRANGE: {
            readonly FIRST_KEY_INDEX: 1;
            readonly IS_READ_ONLY: true;
            readonly transformArguments: (key: import("@redis/client").RedisArgument, fromTimestamp: import("@redis/time-series/dist/lib/commands").Timestamp, toTimestamp: import("@redis/time-series/dist/lib/commands").Timestamp, options?: import("@redis/time-series/dist/lib/commands/RANGE").TsRangeOptions | undefined) => import("@redis/client/dist/lib/RESP/types").CommandArguments;
            readonly transformReply: {
                readonly 2: (this: void, reply: import("@redis/client/dist/lib/RESP/types").TuplesReply<[timestamp: import("@redis/client/dist/lib/RESP/types").NumberReply<number>, value: import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>]>[]) => {
                    timestamp: import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
                    value: number;
                }[];
                readonly 3: (this: void, reply: import("@redis/client/dist/lib/RESP/types").TuplesReply<[timestamp: import("@redis/client/dist/lib/RESP/types").NumberReply<number>, value: import("@redis/client/dist/lib/RESP/types").DoubleReply<number>]>[]) => {
                    timestamp: import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
                    value: import("@redis/client/dist/lib/RESP/types").DoubleReply<number>;
                }[];
            };
        };
        readonly revRange: {
            readonly FIRST_KEY_INDEX: 1;
            readonly IS_READ_ONLY: true;
            readonly transformArguments: (key: import("@redis/client").RedisArgument, fromTimestamp: import("@redis/time-series/dist/lib/commands").Timestamp, toTimestamp: import("@redis/time-series/dist/lib/commands").Timestamp, options?: import("@redis/time-series/dist/lib/commands/RANGE").TsRangeOptions | undefined) => import("@redis/client/dist/lib/RESP/types").CommandArguments;
            readonly transformReply: {
                readonly 2: (this: void, reply: import("@redis/client/dist/lib/RESP/types").TuplesReply<[timestamp: import("@redis/client/dist/lib/RESP/types").NumberReply<number>, value: import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>]>[]) => {
                    timestamp: import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
                    value: number;
                }[];
                readonly 3: (this: void, reply: import("@redis/client/dist/lib/RESP/types").TuplesReply<[timestamp: import("@redis/client/dist/lib/RESP/types").NumberReply<number>, value: import("@redis/client/dist/lib/RESP/types").DoubleReply<number>]>[]) => {
                    timestamp: import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
                    value: import("@redis/client/dist/lib/RESP/types").DoubleReply<number>;
                }[];
            };
        };
    };
    bf: {
        readonly ADD: {
            readonly FIRST_KEY_INDEX: 1;
            readonly IS_READ_ONLY: false;
            readonly transformArguments: (this: void, key: import("@redis/client").RedisArgument, item: import("@redis/client").RedisArgument) => import("@redis/client").RedisArgument[];
            readonly transformReply: {
                2: (reply: import("@redis/client/dist/lib/RESP/types").NumberReply<0 | 1>) => boolean;
                3: () => import("@redis/client/dist/lib/RESP/types").BooleanReply<boolean>;
            };
        };
        readonly add: {
            readonly FIRST_KEY_INDEX: 1;
            readonly IS_READ_ONLY: false;
            readonly transformArguments: (this: void, key: import("@redis/client").RedisArgument, item: import("@redis/client").RedisArgument) => import("@redis/client").RedisArgument[];
            readonly transformReply: {
                2: (reply: import("@redis/client/dist/lib/RESP/types").NumberReply<0 | 1>) => boolean;
                3: () => import("@redis/client/dist/lib/RESP/types").BooleanReply<boolean>;
            };
        };
        readonly CARD: {
            readonly FIRST_KEY_INDEX: 1;
            readonly IS_READ_ONLY: true;
            readonly transformArguments: (this: void, key: import("@redis/client").RedisArgument) => import("@redis/client").RedisArgument[];
            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
        };
        readonly card: {
            readonly FIRST_KEY_INDEX: 1;
            readonly IS_READ_ONLY: true;
            readonly transformArguments: (this: void, key: import("@redis/client").RedisArgument) => import("@redis/client").RedisArgument[];
            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
        };
        readonly EXISTS: {
            readonly FIRST_KEY_INDEX: 1;
            readonly IS_READ_ONLY: true;
            readonly transformArguments: (this: void, key: import("@redis/client").RedisArgument, item: import("@redis/client").RedisArgument) => import("@redis/client").RedisArgument[];
            readonly transformReply: {
                2: (reply: import("@redis/client/dist/lib/RESP/types").NumberReply<0 | 1>) => boolean;
                3: () => import("@redis/client/dist/lib/RESP/types").BooleanReply<boolean>;
            };
        };
        readonly exists: {
            readonly FIRST_KEY_INDEX: 1;
            readonly IS_READ_ONLY: true;
            readonly transformArguments: (this: void, key: import("@redis/client").RedisArgument, item: import("@redis/client").RedisArgument) => import("@redis/client").RedisArgument[];
            readonly transformReply: {
                2: (reply: import("@redis/client/dist/lib/RESP/types").NumberReply<0 | 1>) => boolean;
                3: () => import("@redis/client/dist/lib/RESP/types").BooleanReply<boolean>;
            };
        };
        readonly INFO: {
            readonly FIRST_KEY_INDEX: 1;
            readonly IS_READ_ONLY: true;
            readonly transformArguments: (this: void, key: import("@redis/client").RedisArgument) => import("@redis/client").RedisArgument[];
            readonly transformReply: () => any;
        };
        readonly info: {
            readonly FIRST_KEY_INDEX: 1;
            readonly IS_READ_ONLY: true;
            readonly transformArguments: (this: void, key: import("@redis/client").RedisArgument) => import("@redis/client").RedisArgument[];
            readonly transformReply: () => any;
        };
        readonly INSERT: {
            readonly FIRST_KEY_INDEX: 1;
            readonly IS_READ_ONLY: false;
            readonly transformArguments: (this: void, key: import("@redis/client").RedisArgument, items: import("@redis/client/dist/lib/commands/generic-transformers").RedisVariadicArgument, options?: import("@redis/bloom/dist/lib/commands/bloom/INSERT").BfInsertOptions | undefined) => import("@redis/client/dist/lib/RESP/types").CommandArguments;
            readonly transformReply: {
                2: (reply: import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").NumberReply<0 | 1>>) => boolean[];
                3: () => import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BooleanReply<boolean>>;
            };
        };
        readonly insert: {
            readonly FIRST_KEY_INDEX: 1;
            readonly IS_READ_ONLY: false;
            readonly transformArguments: (this: void, key: import("@redis/client").RedisArgument, items: import("@redis/client/dist/lib/commands/generic-transformers").RedisVariadicArgument, options?: import("@redis/bloom/dist/lib/commands/bloom/INSERT").BfInsertOptions | undefined) => import("@redis/client/dist/lib/RESP/types").CommandArguments;
            readonly transformReply: {
                2: (reply: import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").NumberReply<0 | 1>>) => boolean[];
                3: () => import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BooleanReply<boolean>>;
            };
        };
        readonly LOADCHUNK: {
            readonly FIRST_KEY_INDEX: 1;
            readonly IS_READ_ONLY: false;
            readonly transformArguments: (this: void, key: import("@redis/client").RedisArgument, iterator: number, chunk: import("@redis/client").RedisArgument) => import("@redis/client").RedisArgument[];
            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"OK">;
        };
        readonly loadChunk: {
            readonly FIRST_KEY_INDEX: 1;
            readonly IS_READ_ONLY: false;
            readonly transformArguments: (this: void, key: import("@redis/client").RedisArgument, iterator: number, chunk: import("@redis/client").RedisArgument) => import("@redis/client").RedisArgument[];
            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"OK">;
        };
        readonly MADD: {
            readonly FIRST_KEY_INDEX: 1;
            readonly IS_READ_ONLY: false;
            readonly transformArguments: (this: void, key: import("@redis/client").RedisArgument, items: import("@redis/client/dist/lib/commands/generic-transformers").RedisVariadicArgument) => import("@redis/client/dist/lib/RESP/types").CommandArguments;
            readonly transformReply: {
                2: (reply: import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").NumberReply<0 | 1>>) => boolean[];
                3: () => import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BooleanReply<boolean>>;
            };
        };
        readonly mAdd: {
            readonly FIRST_KEY_INDEX: 1;
            readonly IS_READ_ONLY: false;
            readonly transformArguments: (this: void, key: import("@redis/client").RedisArgument, items: import("@redis/client/dist/lib/commands/generic-transformers").RedisVariadicArgument) => import("@redis/client/dist/lib/RESP/types").CommandArguments;
            readonly transformReply: {
                2: (reply: import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").NumberReply<0 | 1>>) => boolean[];
                3: () => import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BooleanReply<boolean>>;
            };
        };
        readonly MEXISTS: {
            readonly FIRST_KEY_INDEX: 1;
            readonly IS_READ_ONLY: true;
            readonly transformArguments: (this: void, key: import("@redis/client").RedisArgument, items: import("@redis/client/dist/lib/commands/generic-transformers").RedisVariadicArgument) => import("@redis/client/dist/lib/RESP/types").CommandArguments;
            readonly transformReply: {
                2: (reply: import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").NumberReply<0 | 1>>) => boolean[];
                3: () => import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BooleanReply<boolean>>;
            };
        };
        readonly mExists: {
            readonly FIRST_KEY_INDEX: 1;
            readonly IS_READ_ONLY: true;
            readonly transformArguments: (this: void, key: import("@redis/client").RedisArgument, items: import("@redis/client/dist/lib/commands/generic-transformers").RedisVariadicArgument) => import("@redis/client/dist/lib/RESP/types").CommandArguments;
            readonly transformReply: {
                2: (reply: import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").NumberReply<0 | 1>>) => boolean[];
                3: () => import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BooleanReply<boolean>>;
            };
        };
        readonly RESERVE: {
            readonly FIRST_KEY_INDEX: 1;
            readonly IS_READ_ONLY: true;
            readonly transformArguments: (this: void, key: import("@redis/client").RedisArgument, errorRate: number, capacity: number, options?: import("@redis/bloom/dist/lib/commands/bloom/RESERVE").BfReserveOptions | undefined) => import("@redis/client").RedisArgument[];
            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"OK">;
        };
        readonly reserve: {
            readonly FIRST_KEY_INDEX: 1;
            readonly IS_READ_ONLY: true;
            readonly transformArguments: (this: void, key: import("@redis/client").RedisArgument, errorRate: number, capacity: number, options?: import("@redis/bloom/dist/lib/commands/bloom/RESERVE").BfReserveOptions | undefined) => import("@redis/client").RedisArgument[];
            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"OK">;
        };
        readonly SCANDUMP: {
            readonly FIRST_KEY_INDEX: 1;
            readonly IS_READ_ONLY: true;
            readonly transformArguments: (this: void, key: import("@redis/client").RedisArgument, iterator: number) => import("@redis/client").RedisArgument[];
            readonly transformReply: (this: void, reply: [import("@redis/client/dist/lib/RESP/types").NumberReply<number>, import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>]) => {
                iterator: import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
                chunk: import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>;
            };
        };
        readonly scanDump: {
            readonly FIRST_KEY_INDEX: 1;
            readonly IS_READ_ONLY: true;
            readonly transformArguments: (this: void, key: import("@redis/client").RedisArgument, iterator: number) => import("@redis/client").RedisArgument[];
            readonly transformReply: (this: void, reply: [import("@redis/client/dist/lib/RESP/types").NumberReply<number>, import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>]) => {
                iterator: import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
                chunk: import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>;
            };
        };
    };
    cms: {
        readonly INCRBY: {
            readonly FIRST_KEY_INDEX: 1;
            readonly IS_READ_ONLY: false;
            readonly transformArguments: (this: void, key: import("@redis/client").RedisArgument, items: import("@redis/bloom/dist/lib/commands/count-min-sketch/INCRBY").BfIncrByItem | import("@redis/bloom/dist/lib/commands/count-min-sketch/INCRBY").BfIncrByItem[]) => import("@redis/client").RedisArgument[];
            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").NumberReply<number>>;
        };
        readonly incrBy: {
            readonly FIRST_KEY_INDEX: 1;
            readonly IS_READ_ONLY: false;
            readonly transformArguments: (this: void, key: import("@redis/client").RedisArgument, items: import("@redis/bloom/dist/lib/commands/count-min-sketch/INCRBY").BfIncrByItem | import("@redis/bloom/dist/lib/commands/count-min-sketch/INCRBY").BfIncrByItem[]) => import("@redis/client").RedisArgument[];
            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").NumberReply<number>>;
        };
        readonly INFO: {
            readonly FIRST_KEY_INDEX: 1;
            readonly IS_READ_ONLY: true;
            readonly transformArguments: (this: void, key: import("@redis/client").RedisArgument) => import("@redis/client").RedisArgument[];
            readonly transformReply: {
                readonly 2: (reply: [import("@redis/client/dist/lib/RESP/types").BlobStringReply<"width">, import("@redis/client/dist/lib/RESP/types").NumberReply<number>, import("@redis/client/dist/lib/RESP/types").BlobStringReply<"depth">, import("@redis/client/dist/lib/RESP/types").NumberReply<number>, import("@redis/client/dist/lib/RESP/types").BlobStringReply<"count">, import("@redis/client/dist/lib/RESP/types").NumberReply<number>]) => {
                    width: import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
                    depth: import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
                    count: import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
                };
                readonly 3: () => import("@redis/bloom/dist/lib/commands/count-min-sketch/INFO").BfInfoReply;
            };
        };
        readonly info: {
            readonly FIRST_KEY_INDEX: 1;
            readonly IS_READ_ONLY: true;
            readonly transformArguments: (this: void, key: import("@redis/client").RedisArgument) => import("@redis/client").RedisArgument[];
            readonly transformReply: {
                readonly 2: (reply: [import("@redis/client/dist/lib/RESP/types").BlobStringReply<"width">, import("@redis/client/dist/lib/RESP/types").NumberReply<number>, import("@redis/client/dist/lib/RESP/types").BlobStringReply<"depth">, import("@redis/client/dist/lib/RESP/types").NumberReply<number>, import("@redis/client/dist/lib/RESP/types").BlobStringReply<"count">, import("@redis/client/dist/lib/RESP/types").NumberReply<number>]) => {
                    width: import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
                    depth: import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
                    count: import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
                };
                readonly 3: () => import("@redis/bloom/dist/lib/commands/count-min-sketch/INFO").BfInfoReply;
            };
        };
        readonly INITBYDIM: {
            readonly FIRST_KEY_INDEX: 1;
            readonly IS_READ_ONLY: false;
            readonly transformArguments: (this: void, key: import("@redis/client").RedisArgument, width: number, depth: number) => import("@redis/client").RedisArgument[];
            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"OK">;
        };
        readonly initByDim: {
            readonly FIRST_KEY_INDEX: 1;
            readonly IS_READ_ONLY: false;
            readonly transformArguments: (this: void, key: import("@redis/client").RedisArgument, width: number, depth: number) => import("@redis/client").RedisArgument[];
            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"OK">;
        };
        readonly INITBYPROB: {
            readonly FIRST_KEY_INDEX: 1;
            readonly IS_READ_ONLY: false;
            readonly transformArguments: (this: void, key: import("@redis/client").RedisArgument, error: number, probability: number) => import("@redis/client").RedisArgument[];
            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"OK">;
        };
        readonly initByProb: {
            readonly FIRST_KEY_INDEX: 1;
            readonly IS_READ_ONLY: false;
            readonly transformArguments: (this: void, key: import("@redis/client").RedisArgument, error: number, probability: number) => import("@redis/client").RedisArgument[];
            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"OK">;
        };
        readonly MERGE: {
            readonly FIRST_KEY_INDEX: 1;
            readonly IS_READ_ONLY: false;
            readonly transformArguments: (this: void, destination: import("@redis/client").RedisArgument, source: import("@redis/bloom/dist/lib/commands/count-min-sketch/MERGE").BfMergeSketches) => import("@redis/client").RedisArgument[];
            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"OK">;
        };
        readonly merge: {
            readonly FIRST_KEY_INDEX: 1;
            readonly IS_READ_ONLY: false;
            readonly transformArguments: (this: void, destination: import("@redis/client").RedisArgument, source: import("@redis/bloom/dist/lib/commands/count-min-sketch/MERGE").BfMergeSketches) => import("@redis/client").RedisArgument[];
            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"OK">;
        };
        readonly QUERY: {
            readonly FIRST_KEY_INDEX: 1;
            readonly IS_READ_ONLY: true;
            readonly transformArguments: (this: void, key: import("@redis/client").RedisArgument, items: import("@redis/client/dist/lib/commands/generic-transformers").RedisVariadicArgument) => import("@redis/client/dist/lib/RESP/types").CommandArguments;
            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").NumberReply<number>>;
        };
        readonly query: {
            readonly FIRST_KEY_INDEX: 1;
            readonly IS_READ_ONLY: true;
            readonly transformArguments: (this: void, key: import("@redis/client").RedisArgument, items: import("@redis/client/dist/lib/commands/generic-transformers").RedisVariadicArgument) => import("@redis/client/dist/lib/RESP/types").CommandArguments;
            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").NumberReply<number>>;
        };
    };
    cf: {
        readonly ADD: {
            readonly FIRST_KEY_INDEX: 1;
            readonly IS_READ_ONLY: false;
            readonly transformArguments: (this: void, key: import("@redis/client").RedisArgument, item: import("@redis/client").RedisArgument) => import("@redis/client").RedisArgument[];
            readonly transformReply: {
                2: (reply: import("@redis/client/dist/lib/RESP/types").NumberReply<0 | 1>) => boolean;
                3: () => import("@redis/client/dist/lib/RESP/types").BooleanReply<boolean>;
            };
        };
        readonly add: {
            readonly FIRST_KEY_INDEX: 1;
            readonly IS_READ_ONLY: false;
            readonly transformArguments: (this: void, key: import("@redis/client").RedisArgument, item: import("@redis/client").RedisArgument) => import("@redis/client").RedisArgument[];
            readonly transformReply: {
                2: (reply: import("@redis/client/dist/lib/RESP/types").NumberReply<0 | 1>) => boolean;
                3: () => import("@redis/client/dist/lib/RESP/types").BooleanReply<boolean>;
            };
        };
        readonly ADDNX: {
            readonly FIRST_KEY_INDEX: 1;
            readonly IS_READ_ONLY: false;
            readonly transformArguments: (this: void, key: import("@redis/client").RedisArgument, item: import("@redis/client").RedisArgument) => import("@redis/client").RedisArgument[];
            readonly transformReply: {
                2: (reply: import("@redis/client/dist/lib/RESP/types").NumberReply<0 | 1>) => boolean;
                3: () => import("@redis/client/dist/lib/RESP/types").BooleanReply<boolean>;
            };
        };
        readonly addNX: {
            readonly FIRST_KEY_INDEX: 1;
            readonly IS_READ_ONLY: false;
            readonly transformArguments: (this: void, key: import("@redis/client").RedisArgument, item: import("@redis/client").RedisArgument) => import("@redis/client").RedisArgument[];
            readonly transformReply: {
                2: (reply: import("@redis/client/dist/lib/RESP/types").NumberReply<0 | 1>) => boolean;
                3: () => import("@redis/client/dist/lib/RESP/types").BooleanReply<boolean>;
            };
        };
        readonly COUNT: {
            readonly FIRST_KEY_INDEX: 1;
            readonly IS_READ_ONLY: true;
            readonly transformArguments: (this: void, key: import("@redis/client").RedisArgument, item: import("@redis/client").RedisArgument) => import("@redis/client").RedisArgument[];
            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
        };
        readonly count: {
            readonly FIRST_KEY_INDEX: 1;
            readonly IS_READ_ONLY: true;
            readonly transformArguments: (this: void, key: import("@redis/client").RedisArgument, item: import("@redis/client").RedisArgument) => import("@redis/client").RedisArgument[];
            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
        };
        readonly DEL: {
            readonly FIRST_KEY_INDEX: 1;
            readonly IS_READ_ONLY: false;
            readonly transformArguments: (this: void, key: import("@redis/client").RedisArgument, item: import("@redis/client").RedisArgument) => import("@redis/client").RedisArgument[];
            readonly transformReply: {
                2: (reply: import("@redis/client/dist/lib/RESP/types").NumberReply<0 | 1>) => boolean;
                3: () => import("@redis/client/dist/lib/RESP/types").BooleanReply<boolean>;
            };
        };
        readonly del: {
            readonly FIRST_KEY_INDEX: 1;
            readonly IS_READ_ONLY: false;
            readonly transformArguments: (this: void, key: import("@redis/client").RedisArgument, item: import("@redis/client").RedisArgument) => import("@redis/client").RedisArgument[];
            readonly transformReply: {
                2: (reply: import("@redis/client/dist/lib/RESP/types").NumberReply<0 | 1>) => boolean;
                3: () => import("@redis/client/dist/lib/RESP/types").BooleanReply<boolean>;
            };
        };
        readonly EXISTS: {
            readonly FIRST_KEY_INDEX: 1;
            readonly IS_READ_ONLY: false;
            readonly transformArguments: (this: void, key: import("@redis/client").RedisArgument, item: import("@redis/client").RedisArgument) => import("@redis/client").RedisArgument[];
            readonly transformReply: {
                2: (reply: import("@redis/client/dist/lib/RESP/types").NumberReply<0 | 1>) => boolean;
                3: () => import("@redis/client/dist/lib/RESP/types").BooleanReply<boolean>;
            };
        };
        readonly exists: {
            readonly FIRST_KEY_INDEX: 1;
            readonly IS_READ_ONLY: false;
            readonly transformArguments: (this: void, key: import("@redis/client").RedisArgument, item: import("@redis/client").RedisArgument) => import("@redis/client").RedisArgument[];
            readonly transformReply: {
                2: (reply: import("@redis/client/dist/lib/RESP/types").NumberReply<0 | 1>) => boolean;
                3: () => import("@redis/client/dist/lib/RESP/types").BooleanReply<boolean>;
            };
        };
        readonly INFO: {
            readonly FIRST_KEY_INDEX: 1;
            readonly IS_READ_ONLY: true;
            readonly transformArguments: (this: void, key: import("@redis/client").RedisArgument) => import("@redis/client").RedisArgument[];
            readonly transformReply: () => any;
        };
        readonly info: {
            readonly FIRST_KEY_INDEX: 1;
            readonly IS_READ_ONLY: true;
            readonly transformArguments: (this: void, key: import("@redis/client").RedisArgument) => import("@redis/client").RedisArgument[];
            readonly transformReply: () => any;
        };
        readonly INSERT: {
            readonly FIRST_KEY_INDEX: 1;
            readonly IS_READ_ONLY: false;
            readonly transformArguments: (key: import("@redis/client").RedisArgument, items: import("@redis/client/dist/lib/commands/generic-transformers").RedisVariadicArgument, options?: import("@redis/bloom/dist/lib/commands/cuckoo/INSERT").CfInsertOptions | undefined) => import("@redis/client/dist/lib/RESP/types").CommandArguments;
            readonly transformReply: {
                2: (reply: import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").NumberReply<0 | 1>>) => boolean[];
                3: () => import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BooleanReply<boolean>>;
            };
        };
        readonly insert: {
            readonly FIRST_KEY_INDEX: 1;
            readonly IS_READ_ONLY: false;
            readonly transformArguments: (key: import("@redis/client").RedisArgument, items: import("@redis/client/dist/lib/commands/generic-transformers").RedisVariadicArgument, options?: import("@redis/bloom/dist/lib/commands/cuckoo/INSERT").CfInsertOptions | undefined) => import("@redis/client/dist/lib/RESP/types").CommandArguments;
            readonly transformReply: {
                2: (reply: import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").NumberReply<0 | 1>>) => boolean[];
                3: () => import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BooleanReply<boolean>>;
            };
        };
        readonly INSERTNX: {
            readonly FIRST_KEY_INDEX: 1;
            readonly IS_READ_ONLY: false;
            readonly transformArguments: (key: import("@redis/client").RedisArgument, items: import("@redis/client/dist/lib/commands/generic-transformers").RedisVariadicArgument, options?: import("@redis/bloom/dist/lib/commands/cuckoo/INSERT").CfInsertOptions | undefined) => import("@redis/client/dist/lib/RESP/types").CommandArguments;
            readonly transformReply: {
                2: (reply: import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").NumberReply<0 | 1>>) => boolean[];
                3: () => import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BooleanReply<boolean>>;
            };
        };
        readonly insertNX: {
            readonly FIRST_KEY_INDEX: 1;
            readonly IS_READ_ONLY: false;
            readonly transformArguments: (key: import("@redis/client").RedisArgument, items: import("@redis/client/dist/lib/commands/generic-transformers").RedisVariadicArgument, options?: import("@redis/bloom/dist/lib/commands/cuckoo/INSERT").CfInsertOptions | undefined) => import("@redis/client/dist/lib/RESP/types").CommandArguments;
            readonly transformReply: {
                2: (reply: import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").NumberReply<0 | 1>>) => boolean[];
                3: () => import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BooleanReply<boolean>>;
            };
        };
        readonly LOADCHUNK: {
            readonly FIRST_KEY_INDEX: 1;
            readonly IS_READ_ONLY: false;
            readonly transformArguments: (this: void, key: import("@redis/client").RedisArgument, iterator: number, chunk: import("@redis/client").RedisArgument) => import("@redis/client").RedisArgument[];
            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"OK">;
        };
        readonly loadChunk: {
            readonly FIRST_KEY_INDEX: 1;
            readonly IS_READ_ONLY: false;
            readonly transformArguments: (this: void, key: import("@redis/client").RedisArgument, iterator: number, chunk: import("@redis/client").RedisArgument) => import("@redis/client").RedisArgument[];
            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"OK">;
        };
        readonly RESERVE: {
            readonly FIRST_KEY_INDEX: 1;
            readonly IS_READ_ONLY: false;
            readonly transformArguments: (this: void, key: import("@redis/client").RedisArgument, capacity: number, options?: import("@redis/bloom/dist/lib/commands/cuckoo/RESERVE").CfReserveOptions | undefined) => import("@redis/client").RedisArgument[];
            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"OK">;
        };
        readonly reserve: {
            readonly FIRST_KEY_INDEX: 1;
            readonly IS_READ_ONLY: false;
            readonly transformArguments: (this: void, key: import("@redis/client").RedisArgument, capacity: number, options?: import("@redis/bloom/dist/lib/commands/cuckoo/RESERVE").CfReserveOptions | undefined) => import("@redis/client").RedisArgument[];
            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"OK">;
        };
        readonly SCANDUMP: {
            readonly FIRST_KEY_INDEX: 1;
            readonly IS_READ_ONLY: true;
            readonly transformArguments: (this: void, key: import("@redis/client").RedisArgument, iterator: number) => import("@redis/client").RedisArgument[];
            readonly transformReply: (this: void, reply: [import("@redis/client/dist/lib/RESP/types").NumberReply<number>, import("@redis/client/dist/lib/RESP/types").BlobStringReply<string> | import("@redis/client/dist/lib/RESP/types").NullReply]) => {
                iterator: import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
                chunk: import("@redis/client/dist/lib/RESP/types").BlobStringReply<string> | import("@redis/client/dist/lib/RESP/types").NullReply;
            };
        };
        readonly scanDump: {
            readonly FIRST_KEY_INDEX: 1;
            readonly IS_READ_ONLY: true;
            readonly transformArguments: (this: void, key: import("@redis/client").RedisArgument, iterator: number) => import("@redis/client").RedisArgument[];
            readonly transformReply: (this: void, reply: [import("@redis/client/dist/lib/RESP/types").NumberReply<number>, import("@redis/client/dist/lib/RESP/types").BlobStringReply<string> | import("@redis/client/dist/lib/RESP/types").NullReply]) => {
                iterator: import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
                chunk: import("@redis/client/dist/lib/RESP/types").BlobStringReply<string> | import("@redis/client/dist/lib/RESP/types").NullReply;
            };
        };
    };
    tDigest: {
        readonly ADD: {
            readonly FIRST_KEY_INDEX: 1;
            readonly IS_READ_ONLY: false;
            readonly transformArguments: (this: void, key: import("@redis/client").RedisArgument, values: number[]) => import("@redis/client").RedisArgument[];
            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"OK">;
        };
        readonly add: {
            readonly FIRST_KEY_INDEX: 1;
            readonly IS_READ_ONLY: false;
            readonly transformArguments: (this: void, key: import("@redis/client").RedisArgument, values: number[]) => import("@redis/client").RedisArgument[];
            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"OK">;
        };
        readonly BYRANK: {
            readonly FIRST_KEY_INDEX: 1;
            readonly IS_READ_ONLY: true;
            readonly transformArguments: (key: import("@redis/client").RedisArgument, ranks: number[]) => import("@redis/client").RedisArgument[];
            readonly transformReply: {
                2: (reply: import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>[]) => number[];
                3: () => import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").DoubleReply<number>>;
            };
        };
        readonly byRank: {
            readonly FIRST_KEY_INDEX: 1;
            readonly IS_READ_ONLY: true;
            readonly transformArguments: (key: import("@redis/client").RedisArgument, ranks: number[]) => import("@redis/client").RedisArgument[];
            readonly transformReply: {
                2: (reply: import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>[]) => number[];
                3: () => import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").DoubleReply<number>>;
            };
        };
        readonly BYREVRANK: {
            readonly FIRST_KEY_INDEX: 1;
            readonly IS_READ_ONLY: true;
            readonly transformArguments: (key: import("@redis/client").RedisArgument, ranks: number[]) => import("@redis/client").RedisArgument[];
            readonly transformReply: {
                2: (reply: import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>[]) => number[];
                3: () => import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").DoubleReply<number>>;
            };
        };
        readonly byRevRank: {
            readonly FIRST_KEY_INDEX: 1;
            readonly IS_READ_ONLY: true;
            readonly transformArguments: (key: import("@redis/client").RedisArgument, ranks: number[]) => import("@redis/client").RedisArgument[];
            readonly transformReply: {
                2: (reply: import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>[]) => number[];
                3: () => import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").DoubleReply<number>>;
            };
        };
        readonly CDF: {
            readonly FIRST_KEY_INDEX: 1;
            readonly IS_READ_ONLY: true;
            readonly transformArguments: (this: void, key: import("@redis/client").RedisArgument, values: number[]) => import("@redis/client").RedisArgument[];
            readonly transformReply: {
                2: (reply: import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>[]) => number[];
                3: () => import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").DoubleReply<number>>;
            };
        };
        readonly cdf: {
            readonly FIRST_KEY_INDEX: 1;
            readonly IS_READ_ONLY: true;
            readonly transformArguments: (this: void, key: import("@redis/client").RedisArgument, values: number[]) => import("@redis/client").RedisArgument[];
            readonly transformReply: {
                2: (reply: import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>[]) => number[];
                3: () => import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").DoubleReply<number>>;
            };
        };
        readonly CREATE: {
            readonly FIRST_KEY_INDEX: 1;
            readonly IS_READ_ONLY: false;
            readonly transformArguments: (this: void, key: import("@redis/client").RedisArgument, options?: import("@redis/bloom/dist/lib/commands/t-digest/CREATE").TDigestCreateOptions | undefined) => import("@redis/client").RedisArgument[];
            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"OK">;
        };
        readonly create: {
            readonly FIRST_KEY_INDEX: 1;
            readonly IS_READ_ONLY: false;
            readonly transformArguments: (this: void, key: import("@redis/client").RedisArgument, options?: import("@redis/bloom/dist/lib/commands/t-digest/CREATE").TDigestCreateOptions | undefined) => import("@redis/client").RedisArgument[];
            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"OK">;
        };
        readonly INFO: {
            readonly FIRST_KEY_INDEX: 1;
            readonly IS_READ_ONLY: true;
            readonly transformArguments: (this: void, key: import("@redis/client").RedisArgument) => import("@redis/client").RedisArgument[];
            readonly transformReply: () => any;
        };
        readonly info: {
            readonly FIRST_KEY_INDEX: 1;
            readonly IS_READ_ONLY: true;
            readonly transformArguments: (this: void, key: import("@redis/client").RedisArgument) => import("@redis/client").RedisArgument[];
            readonly transformReply: () => any;
        };
        readonly MAX: {
            readonly FIRST_KEY_INDEX: 1;
            readonly IS_READ_ONLY: true;
            readonly transformArguments: (this: void, key: import("@redis/client").RedisArgument) => import("@redis/client").RedisArgument[];
            readonly transformReply: {
                2: (reply: import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>) => number;
                3: () => import("@redis/client/dist/lib/RESP/types").DoubleReply<number>;
            };
        };
        readonly max: {
            readonly FIRST_KEY_INDEX: 1;
            readonly IS_READ_ONLY: true;
            readonly transformArguments: (this: void, key: import("@redis/client").RedisArgument) => import("@redis/client").RedisArgument[];
            readonly transformReply: {
                2: (reply: import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>) => number;
                3: () => import("@redis/client/dist/lib/RESP/types").DoubleReply<number>;
            };
        };
        readonly MERGE: {
            readonly FIRST_KEY_INDEX: undefined;
            readonly IS_READ_ONLY: false;
            readonly transformArguments: (this: void, destination: import("@redis/client").RedisArgument, source: import("@redis/client/dist/lib/commands/generic-transformers").RedisVariadicArgument, options?: import("@redis/bloom/dist/lib/commands/t-digest/MERGE").TDigestMergeOptions | undefined) => import("@redis/client/dist/lib/RESP/types").CommandArguments;
            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"OK">;
        };
        readonly merge: {
            readonly FIRST_KEY_INDEX: undefined;
            readonly IS_READ_ONLY: false;
            readonly transformArguments: (this: void, destination: import("@redis/client").RedisArgument, source: import("@redis/client/dist/lib/commands/generic-transformers").RedisVariadicArgument, options?: import("@redis/bloom/dist/lib/commands/t-digest/MERGE").TDigestMergeOptions | undefined) => import("@redis/client/dist/lib/RESP/types").CommandArguments;
            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"OK">;
        };
        readonly MIN: {
            readonly FIRST_KEY_INDEX: 1;
            readonly IS_READ_ONLY: true;
            readonly transformArguments: (this: void, key: import("@redis/client").RedisArgument) => import("@redis/client").RedisArgument[];
            readonly transformReply: {
                2: (reply: import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>) => number;
                3: () => import("@redis/client/dist/lib/RESP/types").DoubleReply<number>;
            };
        };
        readonly min: {
            readonly FIRST_KEY_INDEX: 1;
            readonly IS_READ_ONLY: true;
            readonly transformArguments: (this: void, key: import("@redis/client").RedisArgument) => import("@redis/client").RedisArgument[];
            readonly transformReply: {
                2: (reply: import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>) => number;
                3: () => import("@redis/client/dist/lib/RESP/types").DoubleReply<number>;
            };
        };
        readonly QUANTILE: {
            readonly FIRST_KEY_INDEX: 1;
            readonly IS_READ_ONLY: true;
            readonly transformArguments: (this: void, key: import("@redis/client").RedisArgument, quantiles: number[]) => import("@redis/client").RedisArgument[];
            readonly transformReply: {
                2: (reply: import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>[]) => number[];
                3: () => import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").DoubleReply<number>>;
            };
        };
        readonly quantile: {
            readonly FIRST_KEY_INDEX: 1;
            readonly IS_READ_ONLY: true;
            readonly transformArguments: (this: void, key: import("@redis/client").RedisArgument, quantiles: number[]) => import("@redis/client").RedisArgument[];
            readonly transformReply: {
                2: (reply: import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>[]) => number[];
                3: () => import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").DoubleReply<number>>;
            };
        };
        readonly RANK: {
            readonly FIRST_KEY_INDEX: 1;
            readonly IS_READ_ONLY: true;
            readonly transformArguments: (key: import("@redis/client").RedisArgument, values: number[]) => import("@redis/client").RedisArgument[];
            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").NumberReply<number>>;
        };
        readonly rank: {
            readonly FIRST_KEY_INDEX: 1;
            readonly IS_READ_ONLY: true;
            readonly transformArguments: (key: import("@redis/client").RedisArgument, values: number[]) => import("@redis/client").RedisArgument[];
            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").NumberReply<number>>;
        };
        readonly RESET: {
            readonly FIRST_KEY_INDEX: 1;
            readonly IS_READ_ONLY: false;
            readonly transformArguments: (this: void, key: import("@redis/client").RedisArgument) => import("@redis/client").RedisArgument[];
            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"OK">;
        };
        readonly reset: {
            readonly FIRST_KEY_INDEX: 1;
            readonly IS_READ_ONLY: false;
            readonly transformArguments: (this: void, key: import("@redis/client").RedisArgument) => import("@redis/client").RedisArgument[];
            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"OK">;
        };
        readonly REVRANK: {
            readonly FIRST_KEY_INDEX: 1;
            readonly IS_READ_ONLY: true;
            readonly transformArguments: (key: import("@redis/client").RedisArgument, values: number[]) => import("@redis/client").RedisArgument[];
            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").NumberReply<number>>;
        };
        readonly revRank: {
            readonly FIRST_KEY_INDEX: 1;
            readonly IS_READ_ONLY: true;
            readonly transformArguments: (key: import("@redis/client").RedisArgument, values: number[]) => import("@redis/client").RedisArgument[];
            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").NumberReply<number>>;
        };
        readonly TRIMMED_MEAN: {
            readonly FIRST_KEY_INDEX: 1;
            readonly IS_READ_ONLY: true;
            readonly transformArguments: (this: void, key: import("@redis/client").RedisArgument, lowCutPercentile: number, highCutPercentile: number) => import("@redis/client").RedisArgument[];
            readonly transformReply: {
                2: (reply: import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>) => number;
                3: () => import("@redis/client/dist/lib/RESP/types").DoubleReply<number>;
            };
        };
        readonly trimmedMean: {
            readonly FIRST_KEY_INDEX: 1;
            readonly IS_READ_ONLY: true;
            readonly transformArguments: (this: void, key: import("@redis/client").RedisArgument, lowCutPercentile: number, highCutPercentile: number) => import("@redis/client").RedisArgument[];
            readonly transformReply: {
                2: (reply: import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>) => number;
                3: () => import("@redis/client/dist/lib/RESP/types").DoubleReply<number>;
            };
        };
    };
    topK: {
        readonly ADD: {
            readonly FIRST_KEY_INDEX: 1;
            readonly IS_READ_ONLY: false;
            readonly transformArguments: (this: void, key: import("@redis/client").RedisArgument, items: import("@redis/client/dist/lib/commands/generic-transformers").RedisVariadicArgument) => import("@redis/client/dist/lib/RESP/types").CommandArguments;
            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>;
        };
        readonly add: {
            readonly FIRST_KEY_INDEX: 1;
            readonly IS_READ_ONLY: false;
            readonly transformArguments: (this: void, key: import("@redis/client").RedisArgument, items: import("@redis/client/dist/lib/commands/generic-transformers").RedisVariadicArgument) => import("@redis/client/dist/lib/RESP/types").CommandArguments;
            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>;
        };
        readonly COUNT: {
            readonly FIRST_KEY_INDEX: 1;
            readonly IS_READ_ONLY: true;
            readonly transformArguments: (this: void, key: import("@redis/client").RedisArgument, items: import("@redis/client/dist/lib/commands/generic-transformers").RedisVariadicArgument) => import("@redis/client/dist/lib/RESP/types").CommandArguments;
            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").NumberReply<number>>;
        };
        readonly count: {
            readonly FIRST_KEY_INDEX: 1;
            readonly IS_READ_ONLY: true;
            readonly transformArguments: (this: void, key: import("@redis/client").RedisArgument, items: import("@redis/client/dist/lib/commands/generic-transformers").RedisVariadicArgument) => import("@redis/client/dist/lib/RESP/types").CommandArguments;
            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").NumberReply<number>>;
        };
        readonly INCRBY: {
            readonly FIRST_KEY_INDEX: 1;
            readonly IS_READ_ONLY: false;
            readonly transformArguments: (this: void, key: import("@redis/client").RedisArgument, items: import("@redis/bloom/dist/lib/commands/top-k/INCRBY").TopKIncrByItem | import("@redis/bloom/dist/lib/commands/top-k/INCRBY").TopKIncrByItem[]) => import("@redis/client").RedisArgument[];
            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").SimpleStringReply<string>>;
        };
        readonly incrBy: {
            readonly FIRST_KEY_INDEX: 1;
            readonly IS_READ_ONLY: false;
            readonly transformArguments: (this: void, key: import("@redis/client").RedisArgument, items: import("@redis/bloom/dist/lib/commands/top-k/INCRBY").TopKIncrByItem | import("@redis/bloom/dist/lib/commands/top-k/INCRBY").TopKIncrByItem[]) => import("@redis/client").RedisArgument[];
            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").NullReply | import("@redis/client/dist/lib/RESP/types").SimpleStringReply<string>>;
        };
        readonly INFO: {
            readonly FIRST_KEY_INDEX: 1;
            readonly IS_READ_ONLY: true;
            readonly transformArguments: (this: void, key: import("@redis/client").RedisArgument) => import("@redis/client").RedisArgument[];
            readonly transformReply: {
                readonly 2: (reply: [import("@redis/client/dist/lib/RESP/types").BlobStringReply<"k">, import("@redis/client/dist/lib/RESP/types").NumberReply<number>, import("@redis/client/dist/lib/RESP/types").BlobStringReply<"width">, import("@redis/client/dist/lib/RESP/types").NumberReply<number>, import("@redis/client/dist/lib/RESP/types").BlobStringReply<"depth">, import("@redis/client/dist/lib/RESP/types").NumberReply<number>, import("@redis/client/dist/lib/RESP/types").BlobStringReply<"decay">, import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>]) => {
                    k: import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
                    width: import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
                    depth: import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
                    decay: number;
                };
                readonly 3: () => import("@redis/bloom/dist/lib/commands/top-k/INFO").TopKInfoReply;
            };
        };
        readonly info: {
            readonly FIRST_KEY_INDEX: 1;
            readonly IS_READ_ONLY: true;
            readonly transformArguments: (this: void, key: import("@redis/client").RedisArgument) => import("@redis/client").RedisArgument[];
            readonly transformReply: {
                readonly 2: (reply: [import("@redis/client/dist/lib/RESP/types").BlobStringReply<"k">, import("@redis/client/dist/lib/RESP/types").NumberReply<number>, import("@redis/client/dist/lib/RESP/types").BlobStringReply<"width">, import("@redis/client/dist/lib/RESP/types").NumberReply<number>, import("@redis/client/dist/lib/RESP/types").BlobStringReply<"depth">, import("@redis/client/dist/lib/RESP/types").NumberReply<number>, import("@redis/client/dist/lib/RESP/types").BlobStringReply<"decay">, import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>]) => {
                    k: import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
                    width: import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
                    depth: import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
                    decay: number;
                };
                readonly 3: () => import("@redis/bloom/dist/lib/commands/top-k/INFO").TopKInfoReply;
            };
        };
        readonly LIST_WITHCOUNT: {
            readonly FIRST_KEY_INDEX: 1;
            readonly IS_READ_ONLY: true;
            readonly transformArguments: (this: void, key: import("@redis/client").RedisArgument) => import("@redis/client").RedisArgument[];
            readonly transformReply: (this: void, rawReply: (import("@redis/client/dist/lib/RESP/types").BlobStringReply<string> | import("@redis/client/dist/lib/RESP/types").NumberReply<number>)[]) => {
                item: import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>;
                count: import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
            }[];
        };
        readonly listWithCount: {
            readonly FIRST_KEY_INDEX: 1;
            readonly IS_READ_ONLY: true;
            readonly transformArguments: (this: void, key: import("@redis/client").RedisArgument) => import("@redis/client").RedisArgument[];
            readonly transformReply: (this: void, rawReply: (import("@redis/client/dist/lib/RESP/types").BlobStringReply<string> | import("@redis/client/dist/lib/RESP/types").NumberReply<number>)[]) => {
                item: import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>;
                count: import("@redis/client/dist/lib/RESP/types").NumberReply<number>;
            }[];
        };
        readonly LIST: {
            readonly FIRST_KEY_INDEX: 1;
            readonly IS_READ_ONLY: true;
            readonly transformArguments: (this: void, key: import("@redis/client").RedisArgument) => import("@redis/client").RedisArgument[];
            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>;
        };
        readonly list: {
            readonly FIRST_KEY_INDEX: 1;
            readonly IS_READ_ONLY: true;
            readonly transformArguments: (this: void, key: import("@redis/client").RedisArgument) => import("@redis/client").RedisArgument[];
            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BlobStringReply<string>>;
        };
        readonly QUERY: {
            readonly FIRST_KEY_INDEX: undefined;
            readonly IS_READ_ONLY: false;
            readonly transformArguments: (this: void, key: import("@redis/client").RedisArgument, items: import("@redis/client/dist/lib/commands/generic-transformers").RedisVariadicArgument) => import("@redis/client/dist/lib/RESP/types").CommandArguments;
            readonly transformReply: {
                2: (reply: import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").NumberReply<0 | 1>>) => boolean[];
                3: () => import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BooleanReply<boolean>>;
            };
        };
        readonly query: {
            readonly FIRST_KEY_INDEX: undefined;
            readonly IS_READ_ONLY: false;
            readonly transformArguments: (this: void, key: import("@redis/client").RedisArgument, items: import("@redis/client/dist/lib/commands/generic-transformers").RedisVariadicArgument) => import("@redis/client/dist/lib/RESP/types").CommandArguments;
            readonly transformReply: {
                2: (reply: import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").NumberReply<0 | 1>>) => boolean[];
                3: () => import("@redis/client/dist/lib/RESP/types").ArrayReply<import("@redis/client/dist/lib/RESP/types").BooleanReply<boolean>>;
            };
        };
        readonly RESERVE: {
            readonly FIRST_KEY_INDEX: 1;
            readonly IS_READ_ONLY: false;
            readonly transformArguments: (this: void, key: import("@redis/client").RedisArgument, topK: number, options?: import("@redis/bloom/dist/lib/commands/top-k/RESERVE").TopKReserveOptions | undefined) => import("@redis/client").RedisArgument[];
            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"OK">;
        };
        readonly reserve: {
            readonly FIRST_KEY_INDEX: 1;
            readonly IS_READ_ONLY: false;
            readonly transformArguments: (this: void, key: import("@redis/client").RedisArgument, topK: number, options?: import("@redis/bloom/dist/lib/commands/top-k/RESERVE").TopKReserveOptions | undefined) => import("@redis/client").RedisArgument[];
            readonly transformReply: () => import("@redis/client/dist/lib/RESP/types").SimpleStringReply<"OK">;
        };
    };
};
export type RedisDefaultModules = typeof modules;
export type RedisClientType<M extends RedisModules = RedisDefaultModules, F extends RedisFunctions = {}, S extends RedisScripts = {}, RESP extends RespVersions = 2, TYPE_MAPPING extends TypeMapping = {}> = _RedisClientType<M, F, S, RESP, TYPE_MAPPING>;
export declare function createClient<M extends RedisModules, F extends RedisFunctions, S extends RedisScripts, RESP extends RespVersions, TYPE_MAPPING extends TypeMapping>(options?: RedisClientOptions<M, F, S, RESP, TYPE_MAPPING>): _RedisClientType<RedisDefaultModules & M, F, S, RESP, TYPE_MAPPING>;
export type RedisClusterType<M extends RedisModules = RedisDefaultModules, F extends RedisFunctions = {}, S extends RedisScripts = {}, RESP extends RespVersions = 2, TYPE_MAPPING extends TypeMapping = {}> = _RedisClusterType<M, F, S, RESP, TYPE_MAPPING>;
export declare function createCluster<M extends RedisModules, F extends RedisFunctions, S extends RedisScripts, RESP extends RespVersions, TYPE_MAPPING extends TypeMapping>(options: RedisClusterOptions<M, F, S, RESP, TYPE_MAPPING>): RedisClusterType<RedisDefaultModules & M, F, S, RESP, TYPE_MAPPING>;
export {};
